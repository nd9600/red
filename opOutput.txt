[H[JREBOL/Core 2.7.8.4.3 (6-Jan-2011)
Copyright 2011 REBOL Technologies
REBOL is a Trademark of REBOL Technologies
All rights reserved.

Finger protocol loaded
Whois protocol loaded
Daytime protocol loaded
SMTP protocol loaded
ESMTP protocol loaded
POP protocol loaded
IMAP protocol loaded
HTTP protocol loaded
FTP protocol loaded
NNTP protocol loaded
Script: "Red command-line front-end" (none)
Script: "Encap virtual filesystem" (21-Sep-2009)

-=== Red Compiler 0.6.4 ===- 

Compiling /home/nathan/repos/myred/opTest.red ...
...using libRedRT built on 14-Apr-2019/21:21:54+1:00
in comp-expression
pc in check-infix-operators:
[
    system/script/args: #system [
        #either type = 'exe [stack/push get-cmdline-args] [none/push]
    ] extract-boot-args
]
none
comp-expression switch
system/script/args:
set-path!
in comp-path
[
    system/script/args: #system [
        #either type = 'exe [stack/push get-cmdline-args] [none/push]
    ] extract-boot-args
]
system/script/args:
path: system/script/args:
value: system
path: script/args:
value: script
path: args:
value: args
calling obj-func-path? with
system/script/args:
after calling calling obj-func-path?
path: system/script/args
fpath: objects/system/script
found?: make object! [
    title: none
    header: none
    parent: none
    path: none
    args: none
]
fpath: objects/system/script
base: objects
obj?: make object! [
    title: none
    header: none
    parent: none
    path: none
    args: none
]
in comp-expression
pc in check-infix-operators:
[#system [
        #either type = 'exe [stack/push get-cmdline-args] [none/push]
    ] extract-boot-args]
none
comp-expression switch
#system
issue!
after if set?
path: system/script/args:
fpath: objects/system/script
ctx: ctx255
index: 4
true-blk: [[word/set-in-ctx ctx255 4]]
emitting
in get-prefix-func
obj-stack: objects
end obj-stack
path!
returning eval-set-path
 
in comp-expression
pc in check-infix-operators:
[extract-boot-args]
none
comp-expression switch
extract-boot-args
word!
in get-prefix-func
obj-stack: objects
end obj-stack
path!
returning extract-boot-args
in get-prefix-func
obj-stack: objects
end obj-stack
path!
returning extract-boot-args
 
##################################################################compiling user code
in comp-expression
pc in check-infix-operators:
[
    b: make op! function [x y] [x + y]
]
none
comp-expression switch
b:
set-word!
going to call dispatch-ctx-keywords with
b:
make
in else
in comp-substitute-expression
in comp-expression
pc in check-infix-operators:
[make op! function [x y] [x + y]]
none
comp-expression switch
make
word!
FETCH-FUNCTIONS2
[op! function [x y] [x + y]]
[
    b: make op! function [x y] [x + y]
]
in fetch-functions
pc: [op! function [x y] [x + y]]
pos: [
    b: make op! function [x y] [x + y]
]
in either's true block
in get-prefix-func
obj-stack: objects
end obj-stack
path!
returning b
src-name: b
name: b
name: b
spec: [x y]
APPENDING FUNCTION4
[
    b [op! 2 [x y] none]
]
in get-prefix-func
obj-stack: objects
end obj-stack
path!
returning make
in comp-expression
pc in check-infix-operators:
[op! function [x y] [x + y]]
none
comp-expression switch
op!
word!
in get-prefix-func
obj-stack: objects
end obj-stack
path!
returning op!
in comp-expression
pc in check-infix-operators:
[function [x y] [x + y]]
none
comp-expression switch
function
word!
original: op!
name: <anon361>
add-function in comp-func
APPENDING FUNCTION3
[<anon361> [function! 2 [x y] none]]
APPENDING FUNCTION6
null
 
functions: make hash! [
    ctx304~eval [function! 2 [code [block! paren!] cmd [issue!] /local after expr] none] 
    ctx304~do-macro [function! 3 [name pos [block! paren!] arity [integer!] /local cmd saved p v res] none] 
    ctx304~register-macro [function! 1 [spec [block!] /local cnt rule p name macro pos valid? named?] none] 
    ctx304~reset [function! 1 [job [none! object!]] none] 
    ctx304~expand [function! 2 [
            code [block!] job [none! object!] 
            /clean 
            /local rule e pos cond value then else cases body keep? expr src saved file
        ] [
            /clean 1 0
        ]] 
    expand-directives [function! 1 [
            {Invokes the preprocessor on argument list, modifying and returning it} 
            code [block! paren!] "List of Red values to preprocess" 
            /clean "Clear all previously created macros and words" 
            /local job
        ] [
            /clean 1 0
        ] ctx304] 
    image?||320 [function! 1 [value [any-type!]] none] 
    keep [function! 1 [v /only] [/only 1 0]] 
    b [op! 2 [x y] none] <anon361> [function! 2 [x y] none]
]
"output2d:"
[
    stack/mark-native ~set 
    word/push ~datatype! 
    datatype/push TYPE_DATATYPE 
    word/set 
    stack/unwind 
    stack/reset 
    #script %/home/nathan/repos/myred/opTest.red 
    #either type = 'exe [stack/push get-cmdline-args] [none/push] 
    #script %/home/nathan/repos/myred/opTest.red 
    either all [
        object/unchanged? ~system 211 
        object/unchanged2? ctx210 12 256
    ] [word/set-in-ctx ctx255 4] [
        stack/mark-func ~eval-set-path exec/ctx175 
        if stack/arguments > stack/bottom [stack/push stack/arguments - 1] 
        object/path-parent/header: TYPE_NONE 
        set-path* eval-path _context/get ~system as cell! ~script as cell! ~args 
        stack/unwind
    ] 
    stack/reset ------------| {system/script/args: #system [ #either type = 'exe ...} 
    stack/mark-func ~extract-boot-args exec/ctx183 
    f_extract-boot-args 
    stack/unwind ------------| "extract-boot-args" #user-code 
    stack/mark-native ~set 
    word/push ~b 
    stack/mark-native ~make 
    word/get ~op! 
    _function/push get-root 1 get-root 2 ctx362 as integer! :f_<anon361> null 
    actions/make* 
    stack/unwind 
    word/set 
    stack/unwind ------------| "b: make op! function [x y] [x + y]"
]
in comp-expression
pc in check-infix-operators:
[x + y]
true
in comp-expression
comp-expression switch
x
word!
in comp-expression
comp-expression switch
y
word!
 
[
    stack/mark-native ~set 
    word/push ~b 
    stack/mark-native ~make 
    word/get ~op! 
    _function/push get-root 1 get-root 2 ctx362 as integer! :f_<anon361> null 
    actions/make* 
    stack/unwind 
    word/set 
    stack/unwind ------------| "b: make op! function [x y] [x + y]" #user-code
]
...compilation time : 32 ms

Target: Linux 

Compiling to native code...
Script: "Red/System ELF format emitter" (none)
...compilation time : 1857 ms
...linking time     : 259 ms
...output file size : 104176 bytes
...output file      : /home/nathan/repos/myred/opTest 


