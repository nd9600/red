[H[JREBOL/Core 2.7.8.4.3 (6-Jan-2011)
Copyright 2011 REBOL Technologies
REBOL is a Trademark of REBOL Technologies
All rights reserved.

Finger protocol loaded
Whois protocol loaded
Daytime protocol loaded
SMTP protocol loaded
ESMTP protocol loaded
POP protocol loaded
IMAP protocol loaded
HTTP protocol loaded
FTP protocol loaded
NNTP protocol loaded
Script: "Red command-line front-end" (none)
Script: "Encap virtual filesystem" (21-Sep-2009)

-=== Red Compiler 0.6.4 ===- 

Compiling /home/nathan/repos/myred/objFuncTest.red ...
...using libRedRT built on 14-Apr-2019/21:21:54+1:00
in comp-expression
pc in check-infix-operators:
[
    system/script/args: #system [
        #either type = 'exe [stack/push get-cmdline-args] [none/push]
    ] extract-boot-args
]
none
comp-expression switch
system/script/args:
set-path!
in comp-path
[
    system/script/args: #system [
        #either type = 'exe [stack/push get-cmdline-args] [none/push]
    ] extract-boot-args
]
system/script/args:
path: system/script/args:
value: system
path: script/args:
value: script
path: args:
value: args
calling obj-func-path? with
system/script/args:
after calling calling obj-func-path?
path: system/script/args
fpath: objects/system/script
found?: make object! [
    title: none
    header: none
    parent: none
    path: none
    args: none
]
fpath: objects/system/script
base: objects
obj?: make object! [
    title: none
    header: none
    parent: none
    path: none
    args: none
]
dispatch-ctx-keywords
none
#system
in comp-expression
pc in check-infix-operators:
[#system [
        #either type = 'exe [stack/push get-cmdline-args] [none/push]
    ] extract-boot-args]
none
comp-expression switch
#system
issue!
after if set?
path: system/script/args:
fpath: objects/system/script
ctx: ctx255
index: 4
true-blk: [[word/set-in-ctx ctx255 4]]
emitting
in emit-path
path: system/script/args:
[_context/get ~system]
path: script/args:
[as cell! ~script]
path: args:
[as cell! ~args]
words: [_context/get ~system as cell! ~script as cell! ~args]
 
in comp-expression
pc in check-infix-operators:
[extract-boot-args]
none
comp-expression switch
extract-boot-args
word!
dispatch-ctx-keywords
none
extract-boot-args
 
##################################################################compiling user code
in comp-expression
pc in check-infix-operators:
[
    a: context [b: function [x y] [x + y]] 
    probe a/b
]
none
comp-expression switch
a:
set-word!
going to call dispatch-ctx-keywords with
a:
context
dispatch-ctx-keywords
context
context
in comp-expression
pc in check-infix-operators:
[b: function [x y] [x + y]]
none
comp-expression switch
b:
set-word!
going to call dispatch-ctx-keywords with
b:
function
dispatch-ctx-keywords
function
function
add-function in comp-func
APPENDING FUNCTION3
[ctx361~b [function! 2 [x y] none]]
APPENDING FUNCTION6
ctx361
[
    _function/push get-root 2 get-root 3 ctx363 as integer! :f_ctx361~b ctx361
]
 
[
    object/init-push ctx361 362 false
]
 
in comp-expression
pc in check-infix-operators:
[
    probe a/b
]
none
comp-expression switch
probe
word!
dispatch-ctx-keywords
none
probe
in comp-expression
pc in check-infix-operators:
[a/b]
none
comp-expression switch
a/b
path!
in comp-path
[a/b]
a/b
dispatch-ctx-keywords
a
a
path: a/b
value: a
path: b
value: b
calling obj-func-path? with
a/b
path: a/b
fpath: objects/a
found?: make object! [
    b: function!
]
fpath: objects/a
base: objects
fun: objects/a/b
fpath: objects/a
doing: function!
fpath: a
obj: [make object! [
        b: function!
    ] ctx361 362 none none]
origin: none
name: ctx361
symbol: ctx361~b
make hash! [ctx361~b [function! 2 [x y] none]]
[b ctx361~b ctx361]
hello1
get?: none
fpath: b
symbol: ctx361~b
ctx: ctx361
"SHOULD PROBABLY CHANGE HERE"
functions: make hash! [
    make [action! 2 [type [datatype! word!] spec [any-type!]] none] 
    random [action! 1 [{Returns a random value of the same datatype; or shuffles series} value "Maximum value of result (modified when series)" /seed "Restart or randomize" /secure {TBD: Returns a cryptographically secure random number} /only "Pick a random value from a series" return: [any-type!]] [/seed 1 0 /secure 2 0 /only 3 0]] 
    reflect [action! 2 [{Returns internal details about a value via reflection} value [any-type!] field [word!] {spec, body, words, etc. Each datatype defines its own reflectors}] none] 
    to [action! 2 ["Converts to a specified datatype" type [any-type!] "The datatype or example value" spec [any-type!] "The attributes of the new value"] none] 
    form [action! 1 [{Returns a user-friendly string representation of a value} value [any-type!] /part "Limit the length of the result" limit [integer!] return: [string!]] [/part 1 1]] 
    mold [action! 1 [{Returns a source format string representation of a value} value [any-type!] /only "Exclude outer brackets if value is a block" /all "TBD: Return value in loadable format" /flat "TBD: Exclude all indentation" /part "Limit the length of the result" limit [integer!] return: [string!]] [/only 1 0 /all 2 0 /flat 3 0 /part 4 1]] 
    modify [action! 3 ["Change mode for target aggregate value" target [object! series!] field [word!] value [any-type!] /case "Perform a case-sensitive lookup" return: [map! file!]] [/case 1 0]] 
    absolute [action! 1 ["Returns the non-negative value" value [number! char! pair! time!] return: [number! char! pair! time!]] none] 
    add [action! 2 ["Returns the sum of the two values" value1 [number! char! pair! tuple! vector! time! date!] value2 [number! char! pair! tuple! vector! time! date!] return: [number! char! pair! tuple! vector! time! date!]] none] 
    divide [action! 2 ["Returns the quotient of two values" value1 [number! char! pair! tuple! vector! time!] "The dividend (numerator)" value2 [number! char! pair! tuple! vector! time!] "The divisor (denominator)" return: [number! char! pair! tuple! vector! time!]] none] 
    multiply [action! 2 ["Returns the product of two values" value1 [number! char! pair! tuple! vector! time!] value2 [number! char! pair! tuple! vector! time!] return: [number! char! pair! tuple! vector! time!]] none] 
    negate [action! 1 ["Returns the opposite (additive inverse) value" number [number! bitset! pair! time!] return: [number! bitset! pair! time!]] none] 
    power [action! 2 [{Returns a number raised to a given power (exponent)} number [number!] "Base value" exponent [integer! float!] "The power (index) to raise the base value by" return: [number!]] none] 
    remainder [action! 2 [{Returns what is left over when one value is divided by another} value1 [number! char! pair! tuple! vector! time!] value2 [number! char! pair! tuple! vector! time!] return: [number! char! pair! tuple! vector! time!]] none] 
    round [action! 1 [{Returns the nearest integer. Halves round up (away from zero) by default} n [number! time! pair!] /to "Return the nearest multiple of the scale parameter" scale [number!] "Must be a non-zero value" /even "Halves round toward even results" /down {Round toward zero, ignoring discarded digits. (truncate)} /half-down "Halves round toward zero" /floor "Round in negative direction" /ceiling "Round in positive direction" /half-ceiling "Halves round in positive direction"] [/to 1 1 /even 2 0 /down 3 0 /half-down 4 0 /floor 5 0 /ceiling 6 0 /half-ceiling 7 0]] 
    subtract [action! 2 ["Returns the difference between two values" value1 [number! char! pair! tuple! vector! time! date!] value2 [number! char! pair! tuple! vector! time! date!] return: [number! char! pair! tuple! vector! time! date!]] none] 
    even? [action! 1 [{Returns true if the number is evenly divisible by 2} number [number! char! time!] return: [number! char! time!]] none] 
    odd? [action! 1 [{Returns true if the number has a remainder of 1 when divided by 2} number [number! char! time!] return: [number! char! time!]] none] 
    and~ [action! 2 ["Returns the first value ANDed with the second" value1 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] value2 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] return: [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!]] none] 
    complement [action! 1 [{Returns the opposite (complementing) value of the input value} value [logic! integer! bitset! typeset! binary!] return: [logic! integer! bitset! typeset! binary!]] none] 
    or~ [action! 2 ["Returns the first value ORed with the second" value1 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] value2 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] return: [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!]] none] 
    xor~ [action! 2 [{Returns the first value exclusive ORed with the second} value1 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] value2 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] return: [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!]] none] 
    append [action! 2 [{Inserts value(s) at series tail; returns series head} series [series! bitset!] value [any-type!] /part "Limit the number of values inserted" length [number! series!] /only {Insert block types as single values (overrides /part)} /dup "Duplicate the inserted values" count [integer!] return: [series! bitset!]] [/part 1 1 /only 2 0 /dup 3 1]] 
    at [action! 2 ["Returns a series at a given index" series [series!] index [integer! pair!] return: [series!]] none] 
    back [action! 1 ["Returns a series at the previous index" series [series!] return: [series!]] none] 
    change [action! 2 [{Changes a value in a series and returns the series after the change} series [series!] "Series at point to change" value [any-type!] "The new value" /part {Limits the amount to change to a given length or position} range [number! series!] /only "Changes a series as a series." /dup "Duplicates the change a specified number of times" count [number!]] [/part 1 1 /only 2 0 /dup 3 1]] 
    clear [action! 1 [{Removes series values from current index to tail; returns new tail} series [series! bitset! map! none!] return: [series! bitset! map! none!]] none] 
    copy [action! 1 ["Returns a copy of a non-scalar value" value [series! any-object! bitset! map!] /part "Limit the length of the result" length [number! series! pair!] /deep "Copy nested values" /types "Copy only specific types of non-scalar values" kind [datatype!] return: [series! any-object! bitset! map!]] [/part 1 1 /deep 2 0 /types 3 1]] 
    find [action! 2 ["Returns the series where a value is found, or NONE" series [series! bitset! typeset! any-object! map! none!] value [any-type!] /part "Limit the length of the search" length [number! series!] /only "Treat a series search value as a single value" /case "Perform a case-sensitive search" /same {Use "same?" as comparator} /any "TBD: Use * and ? wildcards in string searches" /with "TBD: Use custom wildcards in place of * and ?" wild [string!] /skip "Treat the series as fixed size records" size [integer!] /last "Find the last occurrence of value, from the tail" /reverse {Find the last occurrence of value, from the current index} /tail {Return the tail of the match found, rather than the head} /match {Match at current index only and return tail of match}] [/part 1 1 /only 2 0 /case 3 0 /same 4 0 /any 5 0 /with 6 1 /skip 7 1 /last 8 0 /reverse 9 0 /tail 10 0 /match 11 0]] 
    head [action! 1 ["Returns a series at its first index" series [series!] return: [series!]] none] 
    head? [action! 1 ["Returns true if a series is at its first index" series [series!] return: [logic!]] none] 
    index? [action! 1 [{Returns the current index of series relative to the head, or of word in a context} series [series! any-word!] return: [integer!]] none] 
    insert [action! 2 [{Inserts value(s) at series index; returns series past the insertion} series [series! bitset!] value [any-type!] /part "Limit the number of values inserted" length [number! series!] /only {Insert block types as single values (overrides /part)} /dup "Duplicate the inserted values" count [integer!] return: [series! bitset!]] [/part 1 1 /only 2 0 /dup 3 1]] 
    length? [action! 1 [{Returns the number of values in the series, from the current index to the tail} series [series! bitset! map! tuple! none!] return: [integer! none!]] none] 
    move [action! 2 [{Moves one or more elements from one series to another position or series} origin [series!] target [series!] /part "Limit the number of values inserted" length [integer!] return: [series!]] [/part 1 1]] 
    next [action! 1 ["Returns a series at the next index" series [series!] return: [series!]] none] 
    pick [action! 2 ["Returns the series value at a given index" series [series! bitset! pair! tuple! date! time!] index [scalar! any-string! any-word! block! logic! time!] return: [any-type!]] none] 
    poke [action! 3 [{Replaces the series value at a given index, and returns the new value} series [series! bitset!] index [scalar! any-string! any-word! block! logic!] value [any-type!] return: [series! bitset!]] none] 
    put [action! 3 [{Replaces the value following a key, and returns the new value} series [series! map! object!] key [scalar! any-string! any-word! binary!] value [any-type!] /case "Perform a case-sensitive search" return: [series! map! object!]] [/case 1 0]] 
    remove [action! 1 [{Returns the series at the same index after removing a value} series [series! bitset! none!] /part {Removes a number of values, or values up to the given series index} length [number! char! series!] return: [series! bitset! none!]] [/part 1 1]] 
    reverse [action! 1 [{Reverses the order of elements; returns at same position} series [series! pair! tuple!] /part "Limits to a given length or position" length [number! series!] return: [series! pair! tuple!]] [/part 1 1]] 
    select [action! 2 [{Find a value in a series and return the next value, or NONE} series [series! any-object! map! none!] value [any-type!] /part "Limit the length of the search" length [number! series!] /only "Treat a series search value as a single value" /case "Perform a case-sensitive search" /same {Use "same?" as comparator} /any "TBD: Use * and ? wildcards in string searches" /with "TBD: Use custom wildcards in place of * and ?" wild [string!] /skip "Treat the series as fixed size records" size [integer!] /last "Find the last occurrence of value, from the tail" /reverse {Find the last occurrence of value, from the current index} return: [any-type!]] [/part 1 1 /only 2 0 /case 3 0 /same 4 0 /any 5 0 /with 6 1 /skip 7 1 /last 8 0 /reverse 9 0]] 
    sort [action! 1 [{Sorts a series (modified); default sort order is ascending} series [series!] /case "Perform a case-sensitive sort" /skip "Treat the series as fixed size records" size [integer!] /compare "Comparator offset, block or function" comparator [integer! block! any-function!] /part "Sort only part of a series" length [number! series!] /all "Compare all fields" /reverse "Reverse sort order" /stable "Stable sorting" return: [series!]] [/case 1 0 /skip 2 1 /compare 3 1 /part 4 1 /all 5 0 /reverse 6 0 /stable 7 0]] 
    skip [action! 2 ["Returns the series relative to the current index" series [series!] offset [integer! pair!] return: [series!]] none] 
    swap [action! 2 [{Swaps elements between two series or the same series} series1 [series!] series2 [series!] return: [series!]] none] 
    tail [action! 1 ["Returns a series at the index after its last value" series [series!] return: [series!]] none] 
    tail? [action! 1 ["Returns true if a series is past its last value" series [series!] return: [logic!]] none] 
    take [action! 1 ["Removes and returns one or more elements" series [series! none!] /part "Specifies a length or end position" length [number! series!] /deep "Copy nested values" /last "Take it from the tail end"] [/part 1 1 /deep 2 0 /last 3 0]] 
    trim [action! 1 ["Removes space from a string or NONE from a block" series [series!] /head "Removes only from the head" /tail "Removes only from the tail" /auto "Auto indents lines relative to first line" /lines "Removes all line breaks and extra spaces" /all "Removes all whitespace" /with "Same as /all, but removes characters in 'str'" str [char! string! binary! integer!]] [/head 1 0 /tail 2 0 /auto 3 0 /lines 4 0 /all 5 0 /with 6 1]] 
    delete [action! 1 ["Deletes the specified file or empty folder" file [file!]] none] 
    query [action! 1 ["Returns information about a file" target [file!]] none] 
    read [action! 1 ["Reads from a file, URL, or other port" source [file! url!] /part {Partial read a given number of units (source relative)} length [number!] /seek "Read from a specific position (source relative)" index [number!] /binary "Preserves contents exactly" /lines "Convert to block of strings" /info /as {Read with the specified encoding, default is 'UTF-8} encoding [word!]] [/part 1 1 /seek 2 1 /binary 3 0 /lines 4 0 /info 5 0 /as 6 1]] 
    write [action! 2 ["Writes to a file, URL, or other port" destination [file! url!] data [any-type!] /binary "Preserves contents exactly" /lines "Write each value in a block as a separate line" /info /append "Write data at end of file" /part "Partial write a given number of units" length [number!] /seek "Write at a specific position" index [number!] /allow "Specifies protection attributes" access [block!] /as {Write with the specified encoding, default is 'UTF-8} encoding [word!]] [/binary 1 0 /lines 2 0 /info 3 0 /append 4 0 /part 5 1 /seek 6 1 /allow 7 1 /as 8 1]] 
    if [intrinsic! 2 [{If conditional expression is TRUE, evaluate block; else return NONE} cond [any-type!] then-blk [block!]] none] 
    unless [intrinsic! 2 [{If conditional expression is not TRUE, evaluate block; else return NONE} cond [any-type!] then-blk [block!]] none] 
    either [intrinsic! 3 [{If conditional expression is true, eval true-block; else eval false-blk} cond [any-type!] true-blk [block!] false-blk [block!]] none] 
    any [intrinsic! 1 ["Evaluates, returning at the first that is true" conds [block!]] none] 
    all [intrinsic! 1 ["Evaluates, returning at the first that is not true" conds [block!]] none] 
    while [intrinsic! 2 [{Evaluates body as long as condition block returns TRUE} cond [block!] "Condition block to evaluate on each iteration" body [block!] "Block to evaluate on each iteration"] none] 
    until [intrinsic! 1 ["Evaluates body until it is TRUE" body [block!]] none] 
    loop [intrinsic! 2 ["Evaluates body a number of times" count [integer!] body [block!]] none] 
    repeat [intrinsic! 3 [{Evaluates body a number of times, tracking iteration count} 'word [word!] "Iteration counter; not local to loop" value [integer!] "Number of times to evaluate body" body [block!]] none] 
    forever [intrinsic! 1 ["Evaluates body repeatedly forever" body [block!]] none] 
    foreach [intrinsic! 3 ["Evaluates body for each value in a series" 'word [block! word!] "Word, or words, to set on each iteration" series [series!] body [block!]] none] 
    forall [intrinsic! 2 ["Evaluates body for all values in a series" 'word [word!] "Word referring to series to iterate over" body [block!]] none] 
    remove-each [intrinsic! 3 ["Removes values for each block that returns true" 'word [block! word!] "Word or block of words to set each time" data [series!] "The series to traverse (modified)" body [block!] "Block to evaluate (return TRUE to remove)"] none] 
    func [intrinsic! 2 ["Defines a function with a given spec and body" spec [block!] body [block!]] none] 
    function [intrinsic! 2 [{Defines a function, making all set-words found in body, local} spec [block!] body [block!] /extern "Exclude words that follow this refinement"] [/extern 1 0]] 
    does [intrinsic! 1 [{Defines a function with no arguments or local variables} body [block!]] none] 
    has [intrinsic! 2 [{Defines a function with local variables, but no arguments} vars [block!] body [block!]] none] 
    switch [intrinsic! 2 [{Evaluates the first block following the value found in cases} value [any-type!] "The value to match" cases [block!] /default {Specify a default block, if value is not found in cases} case [block!] "Default block to evaluate"] [/default 1 1]] 
    case [intrinsic! 1 [{Evaluates the block following the first true condition} cases [block!] "Block of condition-block pairs" /all {Test all conditions, evaluating the block following each true condition}] [/all 1 0]] 
    do [native! 1 [{Evaluates a value, returning the last evaluation result} value [any-type!] /expand "Expand directives before evaluation" /args {If value is a script, this will set its system/script/args} arg "Args passed to a script (normally a string)" /next {Do next expression only, return it, update block word} position [word!] "Word updated with new block position"] [/expand 1 0 /args 2 1 /next 3 1]] 
    reduce [intrinsic! 1 [{Returns a copy of a block, evaluating all expressions} value [any-type!] /into {Put results in out block, instead of creating a new block} out [any-block!] "Target block for results, when /into is used"] [/into 1 1]] 
    compose [native! 1 ["Returns a copy of a block, evaluating only parens" value /deep "Compose nested blocks" /only {Compose nested blocks as blocks containing their values} /into {Put results in out block, instead of creating a new block} out [any-block!] "Target block for results, when /into is used"] [/deep 1 0 /only 2 0 /into 3 1]] 
    get [intrinsic! 1 ["Returns the value a word refers to" word [object! path! word!] /any {If word has no value, return UNSET rather than causing an error} /case "Use case-sensitive comparison (path only)" return: [any-type!]] [/any 1 0 /case 2 0]] 
    set [intrinsic! 2 ["Sets the value(s) one or more words refer to" word [any-word! block! object! path!] "Word, object, map path or block of words to set" value [any-type!] "Value or block of values to assign to words" /any {Allow UNSET as a value rather than causing an error} /case "Use case-sensitive comparison (path only)" /only {Block or object value argument is set as a single value} /some {None values in a block or object value argument, are not set} return: [any-type!]] [/any 1 0 /case 2 0 /only 3 0 /some 4 0]] 
    print [native! 1 ["Outputs a value followed by a newline" value [any-type!]] none] 
    prin [native! 1 ["Outputs a value" value [any-type!]] none] 
    equal? [native! 2 ["Returns TRUE if two values are equal" value1 [any-type!] value2 [any-type!]] none] 
    not-equal? [native! 2 ["Returns TRUE if two values are not equal" value1 [any-type!] value2 [any-type!]] none] 
    strict-equal? [native! 2 [{Returns TRUE if two values are equal, and also the same datatype} value1 [any-type!] value2 [any-type!]] none] 
    lesser? [native! 2 [{Returns TRUE if the first value is less than the second} value1 [any-type!] value2 [any-type!]] none] 
    greater? [native! 2 [{Returns TRUE if the first value is greater than the second} value1 [any-type!] value2 [any-type!]] none] 
    lesser-or-equal? [native! 2 [{Returns TRUE if the first value is less than or equal to the second} value1 [any-type!] value2 [any-type!]] none] 
    greater-or-equal? [native! 2 [{Returns TRUE if the first value is greater than or equal to the second} value1 [any-type!] value2 [any-type!]] none] 
    same? [native! 2 ["Returns TRUE if two values have the same identity" value1 [any-type!] value2 [any-type!]] none] 
    not [native! 1 ["Returns the boolean complement of a value" value [any-type!]] none] 
    type? [native! 1 ["Returns the datatype of a value" value [any-type!] /word "Return a word value, rather than a datatype value"] [/word 1 0]] 
    stats [native! 0 ["Returns interpreter statistics" /show "TBD:" /info "Output formatted results" return: [integer! block!]] [/show 1 0 /info 2 0]] 
    bind [native! 2 ["Bind words to a context; returns rebound words" word [any-word! block!] context [any-object! any-word! function!] /copy "Deep copy blocks before binding" return: [block! any-word!]] [/copy 1 0]] 
    in [native! 2 [{Returns the given word bound to the object's context} object [any-object!] word [any-word!]] none] 
    parse [native! 2 ["Process a series using dialected grammar rules" input [any-block! any-string! binary!] rules [block!] /case "Uses case-sensitive comparison" /part "Limit to a length or position" length [number! series!] /trace callback [function! [
                    event [word!] 
                    match? [logic!] 
                    rule [block!] 
                    input [series!] 
                    stack [block!] 
                    return: [logic!]
                ]] return: [logic! block!]] [/case 1 0 /part 2 1 /trace 3 1]] 
    union [native! 2 ["Returns the union of two data sets" set1 [bitset! block! hash! string! typeset!] set2 [bitset! block! hash! string! typeset!] /case "Use case-sensitive comparison" /skip "Treat the series as fixed size records" size [integer!] return: [block! hash! string! bitset! typeset!]] [/case 1 0 /skip 2 1]] 
    unique [native! 1 ["Returns the data set with duplicates removed" set [block! hash! string!] /case "Use case-sensitive comparison" /skip "Treat the series as fixed size records" size [integer!] return: [block! hash! string!]] [/case 1 0 /skip 2 1]] 
    intersect [native! 2 ["Returns the intersection of two data sets" set1 [bitset! block! hash! string! typeset!] set2 [bitset! block! hash! string! typeset!] /case "Use case-sensitive comparison" /skip "Treat the series as fixed size records" size [integer!] return: [block! hash! string! bitset! typeset!]] [/case 1 0 /skip 2 1]] 
    difference [native! 2 ["Returns the special difference of two data sets" set1 [bitset! block! date! hash! string! typeset!] set2 [bitset! block! date! hash! string! typeset!] /case "Use case-sensitive comparison" /skip "Treat the series as fixed size records" size [integer!] return: [block! hash! string! bitset! typeset! time!]] [/case 1 0 /skip 2 1]] 
    exclude [native! 2 [{Returns the first data set less the second data set} set1 [bitset! block! hash! string! typeset!] set2 [bitset! block! hash! string! typeset!] /case "Use case-sensitive comparison" /skip "Treat the series as fixed size records" size [integer!] return: [block! hash! string! bitset! typeset!]] [/case 1 0 /skip 2 1]] 
    complement? [native! 1 ["Returns TRUE if the bitset is complemented" bits [bitset!]] none] 
    dehex [native! 1 ["Converts URL-style hex encoded (%xx) strings" value [any-string!] return: [string!] "Always return a string"] none] 
    negative? [native! 1 ["Returns TRUE if the number is negative" number [number! time!]] none] 
    positive? [native! 1 ["Returns TRUE if the number is positive" number [number! time!]] none] 
    max [native! 2 ["Returns the greater of the two values" value1 [scalar! series!] value2 [scalar! series!]] none] 
    min [native! 2 ["Returns the lesser of the two values" value1 [scalar! series!] value2 [scalar! series!]] none] 
    shift [native! 2 [{Perform a bit shift operation. Right shift (decreasing) by default} data [integer!] bits [integer!] /left "Shift bits to the left (increasing)" /logical "Use logical shift (unsigned, fill with zero)" return: [integer!]] [/left 1 0 /logical 2 0]] 
    to-hex [native! 1 [{Converts numeric value to a hex issue! datatype (with leading # and 0's)} value [integer!] /size "Specify number of hex digits in result" length [integer!] return: [issue!]] [/size 1 1]] 
    sine [native! 1 ["Returns the trigonometric sine" angle [number!] /radians "Angle is specified in radians" return: [float!]] [/radians 1 0]] 
    cosine [native! 1 ["Returns the trigonometric cosine" angle [number!] /radians "Angle is specified in radians" return: [float!]] [/radians 1 0]] 
    tangent [native! 1 ["Returns the trigonometric tangent" angle [number!] /radians "Angle is specified in radians" return: [float!]] [/radians 1 0]] 
    arcsine [native! 1 [{Returns the trigonometric arcsine (in degrees by default in range [-90,90])} sine [number!] "in range [-1,1]" /radians "Angle is returned in radians [-pi/2,pi/2]" return: [float!]] [/radians 1 0]] 
    arccosine [native! 1 [{Returns the trigonometric arccosine (in degrees by default in range [0,180])} cosine [number!] "in range [-1,1]" /radians "Angle is returned in radians [0,pi]" return: [float!]] [/radians 1 0]] 
    arctangent [native! 1 [{Returns the trigonometric arctangent (in degrees by default in range [-90,90])} tangent [number!] "in range [-inf,+inf]" /radians "Angle is returned in radians [-pi/2,pi/2]" return: [float!]] [/radians 1 0]] 
    arctangent2 [native! 2 [{Returns the smallest angle between the vectors (1,0) and (x,y) in degrees by default (-180,180]} y [number!] x [number!] /radians "Angle is returned in radians (-pi,pi]" return: [float!]] [/radians 1 0]] 
    NaN? [native! 1 ["Returns TRUE if the number is Not-a-Number" value [number!] return: [logic!]] none] 
    zero? [native! 1 ["Returns TRUE if the value is zero" value [char! number! pair! time! tuple!] return: [logic!]] none] 
    log-2 [native! 1 ["Return the base-2 logarithm" value [number!] return: [float!]] none] 
    log-10 [native! 1 ["Returns the base-10 logarithm" value [number!] return: [float!]] none] 
    log-e [native! 1 [{Returns the natural (base-E) logarithm of the given value} value [number!] return: [float!]] none] 
    exp [native! 1 [{Raises E (the base of natural logarithm) to the power specified} value [number!] return: [float!]] none] 
    square-root [native! 1 ["Returns the square root of a number" value [number!] return: [float!]] none] 
    construct [intrinsic! 1 [{Makes a new object from an unevaluated spec; standard logic words are evaluated} block [block!] /with "Use a prototype object" object [object!] "Prototype object" /only "Don't evaluate standard logic words"] [/with 1 1 /only 2 0]] 
    value? [native! 1 ["Returns TRUE if the word has a value" value return: [logic!]] none] 
    try [intrinsic! 1 [{Tries to DO a block and returns its value or an error} block [block!] /all {Catch also BREAK, CONTINUE, RETURN, EXIT and THROW exceptions}] [/all 1 0]] 
    uppercase [native! 1 ["Converts string of characters to uppercase" string [any-string! char!] /part "Limits to a given length or position" limit [any-string! number!] return: [any-string! char!]] [/part 1 1]] 
    lowercase [native! 1 ["Converts string of characters to lowercase" string [any-string! char!] /part "Limits to a given length or position" limit [any-string! number!] return: [any-string! char!]] [/part 1 1]] 
    as-pair [native! 2 ["Combine X and Y values into a pair" x [float! integer!] y [float! integer!]] none] 
    break [intrinsic! 0 [{Breaks out of a loop, while, until, repeat, foreach, etc} /return "Forces the loop function to return a value" value [any-type!]] [/return 1 1]] 
    continue [intrinsic! 0 ["Throws control back to top of loop"] none] 
    exit [intrinsic! 0 ["Exits a function, returning no value"] none] 
    return [intrinsic! 1 ["Returns a value from a function" value [any-type!]] none] 
    throw [native! 1 ["Throws control back to a previous catch" value [any-type!] "Value returned from catch" /name "Throws to a named catch" word [word!]] [/name 1 1]] 
    catch [native! 1 ["Catches a throw from a block and returns its value" block [block!] "Block to evaluate" /name "Catches a named throw" word [block! word!] "One or more names"] [/name 1 1]] 
    extend [native! 2 [{Extend an object or map value with list of key and value pairs} obj [map! object!] spec [block! hash! map!] /case "Use case-sensitive comparison"] [/case 1 0]] 
    debase [native! 1 [{Decodes binary-coded string (BASE-64 default) to binary value} value [string!] "The string to decode" /base "Binary base to use" base-value [integer!] "The base to convert from: 64, 58, 16, or 2"] [/base 1 1]] 
    enbase [native! 1 [{Encodes a string into a binary-coded string (BASE-64 default)} value [binary! string!] "If string, will be UTF8 encoded" /base "Binary base to use" base-value [integer!] "The base to convert from: 64, 58, 16, or 2"] [/base 1 1]] 
    to-local-file [native! 1 [{Converts a Red file path to the local system file path} path [file! string!] /full {Prepends current dir for full path (for relative paths only)} return: [string!]] [/full 1 0]] 
    wait [native! 1 ["Waits for a duration in seconds or specified time" value [block! none! number! time!] /all "Returns all events in a block"] [/all 1 0]] 
    checksum [native! 2 ["Computes a checksum, CRC, hash, or HMAC" data [binary! file! string!] method [word!] {MD5 SHA1 SHA256 SHA384 SHA512 CRC32 TCP ADLER32 hash} /with {Extra value for HMAC key or hash table size; not compatible with TCP/CRC32/ADLER32 methods} spec [any-string! binary! integer!] {String or binary for MD5/SHA* HMAC key, integer for hash table size} return: [integer! binary!]] [/with 1 1]] 
    unset [native! 1 ["Unsets the value of a word in its current context" word [block! word!] "Word or block of words"] none] 
    new-line [native! 2 [{Sets or clears the new-line marker within a list series} position [any-list!] "Position to change marker (modified)" value [logic!] "Set TRUE for newline" /all "Set/clear marker to end of series" /skip {Set/clear marker periodically to the end of the series} size [integer!] return: [any-list!]] [/all 1 0 /skip 2 1]] 
    new-line? [native! 1 [{Returns the state of the new-line marker within a list series} position [any-list!] "Position to change marker" return: [any-list!]] none] 
    context? [native! 1 ["Returns the context in which a word is bound" word [any-word!] "Word to check" return: [object! function! none!]] none] 
    set-env [native! 2 [{Sets the value of an operating system environment variable (for current process)} var [any-string! any-word!] "Variable to set" value [none! string!] "Value to set, or NONE to unset it"] none] 
    get-env [native! 1 [{Returns the value of an OS environment variable (for current process)} var [any-string! any-word!] "Variable to get" return: [string! none!]] none] 
    list-env [native! 0 [{Returns a map of OS environment variables (for current process)} return: [map!]] none] 
    now [native! 0 ["Returns date and time" /year "Returns year only" /month "Returns month only" /day "Returns day of the month only" /time "Returns time only" /zone "Returns time zone offset from UTC (GMT) only" /date "Returns date only" /weekday {Returns day of the week as integer (Monday is day 1)} /yearday "Returns day of the year (Julian)" /precise "High precision time" /utc "Universal time (no zone)" return: [date! time! integer!]] [/year 1 0 /month 2 0 /day 3 0 /time 4 0 /zone 5 0 /date 6 0 /weekday 7 0 /yearday 8 0 /precise 9 0 /utc 10 0]] 
    sign? [native! 1 [{Returns sign of N as 1, 0, or -1 (to use as a multiplier)} number [number! time!]] none] 
    as [native! 2 [{Coerce a series into a compatible datatype without copying it} type [any-path! any-string! block! datatype! paren!] "The datatype or example value" spec [any-path! any-string! block! paren!] "The series to coerce"] none] 
    call [native! 1 ["Executes a shell command to run another process" cmd [file! string!] "A shell command or an executable file" /wait "Runs command and waits for exit" /show {Force the display of system's shell window (Windows only)} /console {Runs command with I/O redirected to console (CLI console only at present)} /shell "Forces command to be run from shell" /input in [binary! file! string!] "Redirects in to stdin" /output out [binary! file! string!] "Redirects stdout to out" /error err [binary! file! string!] "Redirects stderr to err" return: [integer!] "0 if success, -1 if error, or a process ID"] [/wait 1 0 /show 2 0 /console 3 0 /shell 4 0 /input 5 1 /output 6 1 /error 7 1]] 
    size? [native! 1 ["Returns the size of a file content" file [file!] return: [integer! none!]] none] 
    browse [native! 1 [{Open web browser to a URL or file mananger to a local file} url [file! url!]] none] 
    decompress [native! 1 [{Decompresses data. Data in GZIP format (RFC 1952) by default} data [binary!] /zlib "Data in ZLIB format (RFC 1950)" size [integer!] "Uncompressed data size" /deflate "Data in DEFLATE format (RFC 1951)" size [integer!] "Uncompressed data size"] [/zlib 1 1 /deflate 2 1]] 
    recycle [native! 0 [/on /off] [/on 1 0 /off 2 0]] 
    quit-return [routine! 1 [
            status [integer!]
        ] none] 
    set-quiet [routine! 2 [
            word [red/cell!] 
            value [red/cell!] 
            /local 
            w [red-word!] 
            type [integer!] 
            node [pointer! [integer!]]
        ] none] 
    shift-right [routine! 2 ["Shift bits to the right" data [integer!] bits [integer!]] none] 
    shift-left [routine! 2 ["Shift bits to the left" data [integer!] bits [integer!]] none] 
    shift-logical [routine! 2 ["Shift bits to the right (unsigned)" data [integer!] bits [integer!]] none] 
    last-lf? [routine! 0 ["Internal Use Only" /local bool [red-logic!]] none] 
    get-current-dir [routine! 0 [] none] 
    set-current-dir [routine! 1 [path [red-string!] /local dir [red-file!]] none] 
    create-dir [routine! 1 [path [red-file!]] none] 
    exists? [routine! 1 [path [red-file!] return: [logic!]] none] 
    os-info [routine! 0 [{Returns detailed operating system version information}] none] 
    as-color [routine! 3 [
            "Combine R, G and B values into a tuple" 
            r [integer!] 
            g [integer!] 
            b [integer!] 
            /local 
            arr1 [integer!] 
            err [integer!]
        ] none] 
    as-ipv4 [routine! 4 [
            "Combine a, b, c and d values into a tuple" 
            a [integer!] 
            b [integer!] 
            c [integer!] 
            d [integer!] 
            /local 
            arr1 [integer!] 
            err [integer!]
        ] none] 
    as-rgba [routine! 4 [
            "Combine a, b, c and d values into a tuple" 
            a [integer!] 
            b [integer!] 
            c [integer!] 
            d [integer!] 
            /local 
            arr1 [integer!] 
            err [integer!]
        ] none] 
    read-clipboard [routine! 0 ["Return the contents of the system clipboard"] none] 
    write-clipboard [routine! 1 ["Write content to the system clipboard" data [red-string!]] none] 
    write-stdout [routine! 1 ["Write data to STDOUT" data [red/cell!]] none] 
    routine [function! 2 [{Defines a function with a given Red spec and Red/System body} spec [block!] body [block!]] none] 
    alert [function! 1 [msg [block! string!]] none] 
    also [function! 2 [
            {Returns the first value, but also evaluates the second} 
            value1 [any-type!] 
            value2 [any-type!]
        ] none] 
    attempt [function! 1 [
            {Tries to evaluate a block and returns result or NONE on error} 
            value [block!] 
            /safer "Capture all possible errors and exceptions"
        ] [
            /safer 1 0
        ]] 
    comment [function! 1 ["Consume but don't evaluate the next value" 'value] none] 
    quit [function! 0 [
            "Stops evaluation and exits the program" 
            /return status [integer!] "Return an exit status"
        ] [
            /return 1 1
        ]] 
    empty? [function! 1 [
            {Returns true if a series is at its tail or a map! is empty} 
            series [map! none! series!] 
            return: [logic!]
        ] none] 
    ?? [function! 1 [
            "Prints a word and the value it refers to (molded)" 
            'value [path! word!]
        ] none] 
    probe [function! 1 [
            "Returns a value after printing its molded form" 
            value [any-type!]
        ] none] 
    quote [function! 1 [
            "Return but don't evaluate the next value" 
            :value
        ] none] 
    first [function! 1 ["Returns the first value in a series" s [date! pair! series! time! tuple!]] none] 
    second [function! 1 ["Returns the second value in a series" s [date! pair! series! time! tuple!]] none] 
    third [function! 1 ["Returns the third value in a series" s [date! series! time! tuple!]] none] 
    fourth [function! 1 ["Returns the fourth value in a series" s [date! series! tuple!]] none] 
    fifth [function! 1 ["Returns the fifth value in a series" s [date! series! tuple!]] none] 
    last [function! 1 ["Returns the last value in a series" s [series! tuple!]] none] 
    spec-of [function! 1 [{Returns the spec of a value that supports reflection} value] none] 
    body-of [function! 1 [{Returns the body of a value that supports reflection} value] none] 
    words-of [function! 1 [{Returns the list of words of a value that supports reflection} value] none] 
    class-of [function! 1 ["Returns the class ID of an object" value] none] 
    values-of [function! 1 [{Returns the list of values of a value that supports reflection} value] none] 
    bitset? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    binary? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    block? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    char? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    email? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    file? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    float? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    get-path? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    get-word? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    hash? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    integer? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    issue? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    lit-path? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    lit-word? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    logic? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    map? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    none? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    pair? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    paren? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    path? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    percent? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    refinement? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    set-path? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    set-word? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    string? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    tag? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    time? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    typeset? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    tuple? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    unset? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    url? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    word? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    image? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    date? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    handle? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    error? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    action? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    native? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    datatype? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    function? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    object? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    op? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    routine? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    vector? [function! 1 
        ["Returns true if the value is this type" value [any-type!]] none
    ] 
    any-list? [function! 1 ["Returns true if the value is any type of any-list" value [any-type!]] none] 
    any-block? [function! 1 ["Returns true if the value is any type of any-block" value [any-type!]] none] 
    any-function? [function! 1 [{Returns true if the value is any type of any-function} value [any-type!]] none] 
    any-object? [function! 1 [{Returns true if the value is any type of any-object} value [any-type!]] none] 
    any-path? [function! 1 ["Returns true if the value is any type of any-path" value [any-type!]] none] 
    any-string? [function! 1 [{Returns true if the value is any type of any-string} value [any-type!]] none] 
    any-word? [function! 1 ["Returns true if the value is any type of any-word" value [any-type!]] none] 
    series? [function! 1 ["Returns true if the value is any type of series" value [any-type!]] none] 
    number? [function! 1 ["Returns true if the value is any type of number" value [any-type!]] none] 
    immediate? [function! 1 ["Returns true if the value is any type of immediate" value [any-type!]] none] 
    scalar? [function! 1 ["Returns true if the value is any type of scalar" value [any-type!]] none] 
    all-word? [function! 1 ["Returns true if the value is any type of all-word" value [any-type!]] none] 
    to-bitset [function! 1 ["Convert to bitset! value" value] none] 
    to-binary [function! 1 ["Convert to binary! value" value] none] 
    to-block [function! 1 ["Convert to block! value" value] none] 
    to-char [function! 1 ["Convert to char! value" value] none] 
    to-email [function! 1 ["Convert to email! value" value] none] 
    to-file [function! 1 ["Convert to file! value" value] none] 
    to-float [function! 1 ["Convert to float! value" value] none] 
    to-get-path [function! 1 ["Convert to get-path! value" value] none] 
    to-get-word [function! 1 ["Convert to get-word! value" value] none] 
    to-hash [function! 1 ["Convert to hash! value" value] none] 
    to-integer [function! 1 ["Convert to integer! value" value] none] 
    to-issue [function! 1 ["Convert to issue! value" value] none] 
    to-lit-path [function! 1 ["Convert to lit-path! value" value] none] 
    to-lit-word [function! 1 ["Convert to lit-word! value" value] none] 
    to-logic [function! 1 ["Convert to logic! value" value] none] 
    to-map [function! 1 ["Convert to map! value" value] none] 
    to-none [function! 1 ["Convert to none! value" value] none] 
    to-pair [function! 1 ["Convert to pair! value" value] none] 
    to-paren [function! 1 ["Convert to paren! value" value] none] 
    to-path [function! 1 ["Convert to path! value" value] none] 
    to-percent [function! 1 ["Convert to percent! value" value] none] 
    to-refinement [function! 1 ["Convert to refinement! value" value] none] 
    to-set-path [function! 1 ["Convert to set-path! value" value] none] 
    to-set-word [function! 1 ["Convert to set-word! value" value] none] 
    to-string [function! 1 ["Convert to string! value" value] none] 
    to-tag [function! 1 ["Convert to tag! value" value] none] 
    to-time [function! 1 ["Convert to time! value" value] none] 
    to-typeset [function! 1 ["Convert to typeset! value" value] none] 
    to-tuple [function! 1 ["Convert to tuple! value" value] none] 
    to-unset [function! 1 ["Convert to unset! value" value] none] 
    to-url [function! 1 ["Convert to url! value" value] none] 
    to-word [function! 1 ["Convert to word! value" value] none] 
    to-image [function! 1 ["Convert to image! value" value] none] 
    to-date [function! 1 ["Convert to date! value" value] none] 
    context [function! 1 [
            "Makes a new object from an evaluated spec" 
            spec [block!]
        ] none] 
    alter [function! 2 [
            {If a value is not found in a series, append it; otherwise, remove it. Returns true if added} 
            series [series!] 
            value
        ] none] 
    offset? [function! 2 [
            "Returns the offset between two series positions" 
            series1 [series!] 
            series2 [series!]
        ] none] 
    repend [function! 2 [
            {Appends a reduced value to a series and returns the series head} 
            series [series!] 
            value 
            /only "Appends a block value as a block"
        ] [
            /only 1 0
        ]] 
    replace [function! 3 [
            "Replaces values in a series, in place" 
            series [series!] "The series to be modified" 
            pattern "Specific value or parse rule pattern to match" 
            value "New value, replaces pattern in the series" 
            /all "Replace all occurrences, not just the first" 
            /deep "Replace pattern in all sub-lists as well" 
            /case "Case-sensitive replacement" 
            /local p rule s e many? len pos do-parse do-find
        ] [
            /all 1 0 
            /deep 2 0 
            /case 3 0
        ]] 
    math [function! 1 [
            {Evaluates a block using math precedence rules, returning the last result} 
            body [block!] "Block to evaluate" 
            /safe "Returns NONE on error" 
            /local rule pos op sub end
        ] [
            /safe 1 0
        ]] 
    charset [function! 1 [
            "Shortcut for `make bitset!`" 
            spec [block! char! integer! string!]
        ] none] 
    on-parse-event [function! 5 [
            "Standard parse/trace callback used by PARSE-TRACE" 
            event [word!] {Trace events: push, pop, fetch, match, iterate, paren, end} 
            match? [logic!] "Result of last matching operation" 
            rule [block!] "Current rule at current position" 
            input [series!] "Input series at next position to match" 
            stack [block!] "Internal parse rules stack" 
            return: [logic!] {TRUE: continue parsing, FALSE: stop and exit parsing}
        ] none] 
    parse-trace [function! 2 [
            {Wrapper for parse/trace using the default event processor} 
            input [series!] 
            rules [block!] 
            /case "Uses case-sensitive comparison" 
            /part "Limit to a length or position" 
            limit [integer!] 
            return: [logic! block!]
        ] [
            /case 1 0 
            /part 2 1
        ]] 
    suffix? [function! 1 [
            {Returns the suffix (extension) of a filename or url, or NONE if there is no suffix} 
            path [email! file! string! url!]
        ] none] 
    load [function! 1 [
            {Returns a value or block of values by reading and evaluating a source} 
            source [binary! file! string! url!] 
            /header "TBD" 
            /all {Load all values, returns a block. TBD: Don't evaluate Red header} 
            /trap "Load all values, returns [[values] position error]" 
            /next {Load the next value only, updates source series word} 
            position [word!] "Word updated with new series position" 
            /part "Limit to a length or position" 
            length [integer! string!] 
            /into {Put results in out block, instead of creating a new block} 
            out [block!] "Target block for results" 
            /as "Specify the type of data; use NONE to load as code" 
            type [none! word!] "E.g. bmp, gif, jpeg, png" 
            /local codec suffix name mime result
        ] [
            /header 1 0 
            /all 2 0 
            /trap 3 0 
            /next 4 1 
            /part 5 1 
            /into 6 1 
            /as 7 1
        ]] 
    save [function! 2 [
            {Saves a value, block, or other data to a file, URL, binary, or string} 
            where [binary! file! none! string! url!] "Where to save" 
            value "Value(s) to save" 
            /header {Provide a Red header block (or output non-code datatypes)} 
            header-data [block! object!] 
            /all "TBD: Save in serialized format" 
            /length {Save the length of the script content in the header} 
            /as {Specify the format of data; use NONE to save as plain text} 
            format [none! word!] "E.g. bmp, gif, jpeg, png" 
            /local dst codec data suffix find-encoder? name pos header-str k v
        ] [
            /header 1 1 
            /all 2 0 
            /length 3 0 
            /as 4 1
        ]] 
    cause-error [function! 3 [
            {Causes an immediate error throw, with the provided information} 
            err-type [word!] 
            err-id [word!] 
            args [block!] 
            /local type id arg1 arg2 arg3
        ] none] 
    pad [function! 2 [
            "Pad a FORMed value on right side with spaces" 
            str "Value to pad, FORM it if not a string" 
            n [integer!] "Total size (in characters) of the new string" 
            /left "Pad the string on left side" 
            /with "Pad with char" 
            c [char!] 
            return: [string!] "Modified input string at head"
        ] [
            /left 1 0 
            /with 2 1
        ]] 
    mod [function! 2 [
            "Compute a nonnegative remainder of A divided by B" 
            a [char! number! pair! time! tuple! vector!] 
            b [char! number! pair! time! tuple! vector!] "Must be nonzero" 
            return: [number! char! pair! tuple! vector! time!] 
            /local r
        ] none] 
    modulo [function! 2 [
            {Wrapper for MOD that handles errors like REMAINDER. Negligible values (compared to A and B) are rounded to zero} 
            a [char! number! pair! time! tuple! vector!] 
            b [char! number! pair! time! tuple! vector!] 
            return: [number! char! pair! tuple! vector! time!] 
            /local r
        ] none] 
    eval-set-path [function! 1 ["Internal Use Only" value1] none] 
    to-red-file [function! 1 [
            {Converts a local system file path to a Red file path} 
            path [file! string!] 
            return: [file!] 
            /local colon? slash? len i c dst
        ] none] 
    dir? [function! 1 [{Returns TRUE if the value looks like a directory spec} file [file! url!]] none] 
    normalize-dir [function! 1 [
            "Returns an absolute directory spec" 
            dir [file! path! word!]
        ] none] 
    what-dir [function! 0 [
            "Returns the active directory path" 
            /local path
        ] none] 
    change-dir [function! 1 [
            "Changes the active directory path" 
            dir [file! path! word!] {New active directory of relative path to the new one}
        ] none] 
    make-dir [function! 1 [
            {Creates the specified directory. No error if already exists} 
            path [file!] 
            /deep "Create subdirectories too" 
            /local dirs end created dir
        ] [
            /deep 1 0
        ]] 
    extract [function! 2 [
            {Extracts a value from a series at regular intervals} 
            series [series!] 
            width [integer!] "Size of each entry (the skip)" 
            /index "Extract from an offset position" 
            pos [integer!] "The position" 
            /into {Provide an output series instead of creating a new one} 
            output [series!] "Output series"
        ] [
            /index 1 1 
            /into 2 1
        ]] 
    extract-boot-args [function! 0 [
            {Process command-line arguments and store values in system/options (internal usage)} 
            /local args pos unescape len e s
        ] none] 
    collect [function! 1 [
            {Collect in a new block all the values passed to KEEP function from the body block} 
            body [block!] "Block to evaluate" 
            /into {Insert into a buffer instead (returns position after insert)} 
            collected [series!] "The buffer series (modified)" 
            /local keep rule pos
        ] [
            /into 1 1
        ]] 
    flip-exe-flag [function! 1 [
            {Flip the sub-system for the red.exe between console and GUI modes (Windows only)} 
            path [file!] "Path to the red.exe" 
            /local file buffer flag
        ] none] 
    split [function! 2 [
            {Break a string series into pieces using the provided delimiters} 
            series [any-string!] dlm [bitset! char! string!] /local s 
            num
        ] none] 
    dirize [function! 1 [
            "Returns a copy of the path turned into a directory" 
            path [file! string! url!]
        ] none] 
    clean-path [function! 1 [
            {Cleans-up '.' and '..' in path; returns the cleaned path} 
            file [file! string! url!] 
            /only "Do not prepend current directory" 
            /dir "Add a trailing / if missing" 
            /local out cnt f not-file?
        ] [
            /only 1 0 
            /dir 2 0
        ]] 
    split-path [function! 1 [
            {Splits a file or URL path. Returns a block containing path and target} 
            target [file! url!] 
            /local dir pos
        ] none] 
    do-file [function! 1 ["Internal Use Only" file [file! url!] /local saved code new-path src] none] 
    path-thru [function! 1 [
            "Returns the local disk cache path of a remote file" 
            url [url!] "Remote file address" 
            return: [file!] 
            /local so hash file path
        ] none] 
    exists-thru? [function! 1 [
            {Returns true if the remote file is present in the local disk cache} 
            url [file! url!] "Remote file address"
        ] none] 
    read-thru [function! 1 [
            "Reads a remote file through local disk cache" 
            url [url!] "Remote file address" 
            /update "Force a cache update" 
            /binary "Use binary mode" 
            /local path data
        ] [
            /update 1 0 
            /binary 2 0
        ]] 
    load-thru [function! 1 [
            "Loads a remote file through local disk cache" 
            url [url!] "Remote file address" 
            /update "Force a cache update" 
            /as "Specify the type of data; use NONE to load as code" 
            type [none! word!] "E.g. bmp, gif, jpeg, png" 
            /local path file
        ] [
            /update 1 0 
            /as 2 1
        ]] 
    do-thru [function! 1 [
            {Evaluates a remote Red script through local disk cache} 
            url [url!] "Remote file address" 
            /update "Force a cache update"
        ] [
            /update 1 0
        ]] 
    cos [function! 1 [
            "Returns the trigonometric cosine" 
            angle [float!] "Angle in radians"
        ] none] 
    sin [function! 1 [
            "Returns the trigonometric sine" 
            angle [float!] "Angle in radians"
        ] none] 
    tan [function! 1 [
            "Returns the trigonometric tangent" 
            angle [float!] "Angle in radians"
        ] none] 
    acos [function! 1 [
            {Returns the trigonometric arccosine (in radians in range [0,pi])} 
            cosine [float!] "in range [-1,1]"
        ] none] 
    asin [function! 1 [
            {Returns the trigonometric arcsine (in radians in range [-pi/2,pi/2])} 
            sine [float!] "in range [-1,1]"
        ] none] 
    atan [function! 1 [
            {Returns the trigonometric arctangent (in radians in range [-pi/2,+pi/2])} 
            tangent [float!] "in range [-inf,+inf]"
        ] none] 
    atan2 [function! 2 [
            {Returns the smallest angle between the vectors (1,0) and (x,y) in range (-pi,pi]} 
            y [number!] 
            x [number!] 
            return: [float!]
        ] none] 
    sqrt [function! 1 [
            "Returns the square root of a number" 
            number [number!] 
            return: [float!]
        ] none] 
    to-UTC-date [function! 1 [
            "Returns the date with UTC zone" 
            date [date!] 
            return: [date!]
        ] none] 
    to-local-date [function! 1 [
            "Returns the date with local zone" 
            date [date!] 
            return: [date!]
        ] none] 
    rejoin [function! 1 [
            "Reduces and joins a block of values." 
            block [block!] "Values to reduce and join"
        ] none] 
    sum [function! 1 [
            "Returns the sum of all values in a block" 
            values [block! hash! paren! vector!] 
            /local result value
        ] none] 
    average [function! 1 [
            "Returns the average of all values in a block" 
            block [block! hash! paren! vector!]
        ] none] 
    last? [function! 1 [
            "Returns TRUE if the series length is 1" 
            series [series!]
        ] none] 
    keys-of [function! 1 [{Returns the list of words of a value that supports reflection} value] none] 
    object [function! 1 [
            "Makes a new object from an evaluated spec" 
            spec [block!]
        ] none] 
    halt [function! 0 [
            "Stops evaluation and exits the program" 
            /return status [integer!] "Return an exit status"
        ] [
            /return 1 1
        ]] 
    ctx210~platform [function! 0 ["Return a word identifying the operating system"] none] 
    ctx239~interpreted? [function! 0 ["Return TRUE if called from the interpreter"] none] 
    ctx250~on-change* [function! 3 [word old new] none] 
    ctx248~on-change* [function! 3 [word old new] none] 
    ctx248~on-deep-change* [function! 7 [owner word target action new index part] none] 
    ctx265~throw-error [function! 1 [spec [block!] /missing 
            /local type src pos
        ] [/missing 1 0]] 
    ctx265~make-hm [routine! 2 [h [integer!] m [integer!]] none] 
    ctx265~make-msf [routine! 2 [m [integer!] s [float!]] none] 
    ctx265~make-hms [routine! 3 [h [integer!] m [integer!] s [integer!]] none] 
    ctx265~make-hmsf [routine! 3 [h [integer!] m [integer!] s [float!]] none] 
    ctx265~make-time [function! 5 [
            pos [string!] 
            hours [integer! none!] 
            mins [integer!] 
            secs [float! integer! none!] 
            neg? [logic!] 
            return: [time!] 
            /local time
        ] none] 
    ctx265~make-binary [routine! 3 [
            start [red-string!] 
            end [red-string!] 
            base [integer!] 
            /local 
            s [red/series-buffer!] 
            p [pointer! [byte!]] 
            len [integer!] 
            unit [integer!] 
            ret [red-binary!]
        ] none] 
    ctx265~make-tuple [routine! 2 [
            start [red-string!] 
            end [red-string!] 
            /local 
            s [red/series-buffer!] 
            err [integer!] 
            len [integer!] 
            unit [integer!] 
            p [pointer! [byte!]] 
            tp [pointer! [byte!]] 
            ret [red/cell!]
        ] none] 
    ctx265~make-number [routine! 3 [
            start [red-string!] 
            end [red-string!] 
            type [red-datatype!] 
            /local 
            s [red/series-buffer!] 
            len [integer!] 
            unit [integer!] 
            p [pointer! [byte!]] 
            err [integer!] 
            i [integer!]
        ] none] 
    ctx265~make-float [routine! 3 [
            start [red-string!] 
            end [red-string!] 
            type [red-datatype!] 
            /local 
            s [red/series-buffer!] 
            unit [integer!] 
            len [integer!] 
            p [pointer! [byte!]] 
            err [integer!] 
            f [float!]
        ] none] 
    ctx265~make-hexa [routine! 2 [
            start [red-string!] 
            end [red-string!] 
            return: [integer!] 
            /local 
            s [red/series-buffer!] 
            unit [integer!] 
            p [pointer! [byte!]] 
            head [pointer! [byte!]] 
            p4 [pointer! [integer!]] 
            n [integer!] 
            power [integer!] 
            cp [byte!]
        ] none] 
    ctx265~make-char [routine! 2 [
            start [red-string!] 
            end [red-string!] 
            /local 
            n [integer!] 
            value [red/cell!]
        ] none] 
    ctx265~push-path [routine! 2 [
            stack [red-block!] 
            type [red-datatype!] 
            /local 
            path [red-path!]
        ] none] 
    ctx265~set-path [routine! 1 [
            stack [red-block!] 
            /local 
            path [red-path!]
        ] none] 
    ctx265~make-word [routine! 2 [
            src [red-string!] 
            type [red-datatype!]
        ] none] 
    ctx265~to-word [function! 3 [
            stack [block!] 
            src [string!] 
            type [datatype!]
        ] none] 
    ctx265~pop [function! 1 [stack [block!] 
            /local value pos
        ] none] 
    ctx265~store [function! 2 [stack [block!] value 
            /local pos
        ] none] 
    ctx265~new-line [routine! 1 [
            series [red/cell!] 
            /local 
            blk [red-block!] 
            s [red/series-buffer!] 
            cell [red/cell!]
        ] none] 
    ctx265~transcode [function! 3 [
            src [string!] 
            dst [block! none!] 
            trap [logic!] 
            /one 
            /only 
            /part 
            length [integer! string!] 
            return: [block!] 
            /local 
            new s e c pos value cnt type process path 
            digit hexa-upper hexa-lower hexa hexa-char not-word-char not-word-1st 
            not-file-char not-str-char not-mstr-char caret-char 
            non-printable-char integer-end ws-ASCII ws-U+2k control-char 
            four half non-zero path-end base base64-char slash-end not-url-char 
            email-end pair-end file-end err date-sep time-sep not-tag-1st 
            cs stack count? old-line line make-string len make-file buffer month-rule m mon-rule list p byte ws newline-char counted-newline ws-no-count escaped-char char-rule line-string nested-curly-braces multiline-string string-rule tag-rule email-rule base-2-rule base-16-rule base-64-rule binary-rule file-rule url-rule symbol-rule ot begin-symbol-rule path-rule special-words word-rule get-word-rule lit-word-rule issue-rule refinement-rule sticky-word-rule hexa-rule tuple-value-rule tuple-rule time-rule value2 day-year-rule year day date-rule ee month date sep hour mn sec neg? zone positive-integer-rule integer-number-rule integer-rule float-special float-exp-rule float-number-rule float-rule map-rule block-rule paren-rule escaped-rule comment-rule wrong-end ending literal-value one-value any-value red-rules
        ] [
            /one 1 0 
            /only 2 0 
            /part 3 1
        ]] 
    + [op! 2 ["Returns the sum of the two values" value1 [number! char! pair! tuple! vector! time! date!] value2 [number! char! pair! tuple! vector! time! date!] return: [number! char! pair! tuple! vector! time! date!]] none] 
    - [op! 2 ["Returns the difference between two values" value1 [number! char! pair! tuple! vector! time! date!] value2 [number! char! pair! tuple! vector! time! date!] return: [number! char! pair! tuple! vector! time! date!]] none] 
    * [op! 2 ["Returns the product of two values" value1 [number! char! pair! tuple! vector! time!] value2 [number! char! pair! tuple! vector! time!] return: [number! char! pair! tuple! vector! time!]] none] 
    / [op! 2 ["Returns the quotient of two values" value1 [number! char! pair! tuple! vector! time!] "The dividend (numerator)" value2 [number! char! pair! tuple! vector! time!] "The divisor (denominator)" return: [number! char! pair! tuple! vector! time!]] none] 
    // [op! 2 [
            {Wrapper for MOD that handles errors like REMAINDER. Negligible values (compared to A and B) are rounded to zero} 
            a [char! number! pair! time! tuple! vector!] 
            b [char! number! pair! time! tuple! vector!] 
            return: [number! char! pair! tuple! vector! time!] 
            /local r
        ] none] % [op! 2 [{Returns what is left over when one value is divided by another} value1 [number! char! pair! tuple! vector! time!] value2 [number! char! pair! tuple! vector! time!] return: [number! char! pair! tuple! vector! time!]] none] 
    = [op! 2 ["Returns TRUE if two values are equal" value1 [any-type!] value2 [any-type!]] none] 
    <> [op! 2 ["Returns TRUE if two values are not equal" value1 [any-type!] value2 [any-type!]] none] 
    == [op! 2 [{Returns TRUE if two values are equal, and also the same datatype} value1 [any-type!] value2 [any-type!]] none] 
    =? [op! 2 ["Returns TRUE if two values have the same identity" value1 [any-type!] value2 [any-type!]] none] 
    < [op! 2 [{Returns TRUE if the first value is less than the second} value1 [any-type!] value2 [any-type!]] none] 
    > [op! 2 [{Returns TRUE if the first value is greater than the second} value1 [any-type!] value2 [any-type!]] none] 
    <= [op! 2 [{Returns TRUE if the first value is less than or equal to the second} value1 [any-type!] value2 [any-type!]] none] 
    >= [op! 2 [{Returns TRUE if the first value is greater than or equal to the second} value1 [any-type!] value2 [any-type!]] none] 
    << [op! 2 ["Shift bits to the left" data [integer!] bits [integer!]] none] 
    >> [op! 2 ["Shift bits to the right" data [integer!] bits [integer!]] none] >>> [op! 2 ["Shift bits to the right (unsigned)" data [integer!] bits [integer!]] none] 
    ** [op! 2 [{Returns a number raised to a given power (exponent)} number [number!] "Base value" exponent [integer! float!] "The power (index) to raise the base value by" return: [number!]] none] 
    and [op! 2 ["Returns the first value ANDed with the second" value1 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] value2 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] return: [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!]] none] 
    or [op! 2 ["Returns the first value ORed with the second" value1 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] value2 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] return: [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!]] none] 
    xor [op! 2 [{Returns the first value exclusive ORed with the second} value1 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] value2 [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!] return: [logic! integer! char! bitset! binary! typeset! pair! tuple! vector!]] none] 
    ctx273~encode [routine! 2 [img [red-image!] where [red/cell!]] none] 
    ctx273~decode [routine! 1 [data [red/cell!]] none] 
    ctx276~encode [routine! 2 [img [red-image!] where [red/cell!]] none] 
    ctx276~decode [routine! 1 [data [red/cell!]] none] 
    ctx279~encode [routine! 2 [img [red-image!] where [red/cell!]] none] 
    ctx279~decode [routine! 1 [data [red/cell!]] none] 
    ctx282~encode [routine! 2 [img [red-image!] where [red/cell!]] none] 
    ctx282~decode [routine! 1 [data [red/cell!]] none] 
    ctx285~on-change* [function! 3 [word old new 
            /local srs
        ] none] 
    ctx288~on-change* [function! 3 [word old new 
            /local srs
        ] none] 
    ctx288~on-deep-change* [function! 7 [owner word target action new index part] none] 
    ctx291~add-relation [function! 4 [
            obj [object!] 
            word [default!] 
            reaction [block! function!] 
            targets [block! none! object! set-word!] 
            /local new-rel
        ] none] 
    ctx291~eval [function! 1 [code [block!] /safe 
            /local result
        ] [/safe 1 0]] 
    ctx291~eval-reaction [function! 3 [reactor [object!] reaction [block! function!] target /mark] [/mark 1 0]] 
    ctx291~pending? [function! 2 [reactor [object!] reaction [block! function!] 
            /local q
        ] none] 
    ctx291~check [function! 1 [reactor [object!] /only field [set-word! word!] 
            /local pos reaction q q'
        ] [/only 1 1]] 
    stop-reactor [function! 1 [
            face [object!] 
            /deep 
            /local list pos f
        ] [
            /deep 1 0
        ] ctx291] 
    clear-reactions [function! 0 ["Removes all reactive relations"] none ctx291] 
    dump-reactions [function! 0 [
            {Output all the current reactive relations for debugging purpose} 
            /local limit count obj field reaction target list
        ] none ctx291] 
    ctx291~is~ [function! 2 [
            {Defines a reactive relation whose result is assigned to a word} 
            'field [set-word!] {Set-word which will get set to the result of the reaction} 
            reaction [block!] "Reactive relation" 
            /local words obj rule item
        ] none ctx291] 
    is [op! 2 [
            {Defines a reactive relation whose result is assigned to a word} 
            'field [set-word!] {Set-word which will get set to the result of the reaction} 
            reaction [block!] "Reactive relation" 
            /local words obj rule item
        ] none] 
    react? [function! 2 [
            {Returns a reactive relation if an object's field is a reactive source} 
            reactor [object!] "Object to check" 
            field [word!] "Field to check" 
            /target "Check if it's a target instead of a source" 
            return: [block! function! word! none!] "Returns reaction, type or NONE" 
            /local pos
        ] [
            /target 1 0
        ] ctx291] 
    react [function! 1 [
            {Defines a new reactive relation between two or more objects} 
            reaction [block! function!] "Reactive relation" 
            /link "Link objects together using a reactive relation" 
            objects [block!] "Objects to link together" 
            /unlink "Removes an existing reactive relation" 
            src [block! object! word!] "'all word, or a reactor or a list of reactors" 
            /later "Run the reaction on next change instead of now" 
            /with "Specifies an optional face object (internal use)" 
            ctx [none! object! set-word!] "Optional context for VID faces or target set-word" 
            return: [block! function! none!] {The reactive relation or NONE if no relation was processed} 
            /local objs found? rule item pos obj saved part path
        ] [
            /link 1 1 
            /unlink 2 1 
            /later 3 0 
            /with 4 1
        ] ctx291] 
    ctx304~do-quit [function! 0 [] none] 
    ctx304~throw-error [function! 3 [error [error!] cmd [issue!] code [block!] /local w] none] 
    ctx304~syntax-error [function! 2 [s [block! paren!] e [block! paren!]] none] 
    ctx304~do-safe [function! 1 [code [block! paren!] /manual /with cmd [issue!] /local res t? src] [/manual 1 0 /with 2 1]] 
    ctx304~do-code [function! 2 [code [block! paren!] cmd [issue!] /local p] none] 
    ctx304~count-args [function! 1 [spec [block!] /local total] none] 
    ctx304~func-arity? [function! 1 [spec [block!] /with path [path!] /local arity pos] [/with 1 1]] 
    ctx304~fetch-next [function! 1 [code [block! paren!] /local base arity value path] none] 
    ctx304~eval [function! 2 [code [block! paren!] cmd [issue!] /local after expr] none] 
    ctx304~do-macro [function! 3 [name pos [block! paren!] arity [integer!] /local cmd saved p v res] none] 
    ctx304~register-macro [function! 1 [spec [block!] /local cnt rule p name macro pos valid? named?] none] 
    ctx304~reset [function! 1 [job [none! object!]] none] 
    ctx304~expand [function! 2 [
            code [block!] job [none! object!] 
            /clean 
            /local rule e pos cond value then else cases body keep? expr src saved file
        ] [
            /clean 1 0
        ]] 
    expand-directives [function! 1 [
            {Invokes the preprocessor on argument list, modifying and returning it} 
            code [block! paren!] "List of Red values to preprocess" 
            /clean "Clear all previously created macros and words" 
            /local job
        ] [
            /clean 1 0
        ] ctx304] 
    image?||320 [function! 1 [value [any-type!]] none] 
    keep [function! 1 [v /only] [/only 1 0]] ctx361~b [function! 2 [x y] none]
]
objects: [
    system make object! [
        version: none
        build: make object! [
            date: none
            git: none
            config: none
        ]
        words: none
        platform: function!
        catalog: make object! [
            datatypes: none
            actions: none
            natives: none
            accessors: none
            errors: make object! [
                throw: make object! [
                    code: none
                    type: none
                    break: none
                    return: none
                    throw: none
                    continue: none
                    while-cond: none
                ]
                note: make object! [
                    code: none
                    type: none
                    no-load: none
                ]
                syntax: make object! [
                    code: none
                    type: none
                    invalid: none
                    missing: none
                    no-header: none
                    no-rs-header: none
                    bad-header: none
                    malconstruct: none
                    bad-char: none
                ]
                script: make object! [
                    code: none
                    type: none
                    no-value: none
                    need-value: none
                    not-defined: none
                    not-in-context: none
                    no-arg: none
                    expect-arg: none
                    expect-val: none
                    expect-type: none
                    cannot-use: none
                    invalid-arg: none
                    invalid-type: none
                    invalid-type-spec: none
                    invalid-op: none
                    no-op-arg: none
                    bad-op-spec: none
                    invalid-data: none
                    invalid-part: none
                    not-same-type: none
                    not-same-class: none
                    not-related: none
                    bad-func-def: none
                    bad-func-arg: none
                    bad-func-extern: none
                    no-refine: none
                    bad-refines: none
                    bad-refine: none
                    word-first: none
                    empty-path: none
                    invalid-path: none
                    invalid-path-set: none
                    invalid-path-get: none
                    bad-path-type: none
                    bad-path-set: none
                    bad-field-set: none
                    dup-vars: none
                    past-end: none
                    missing-arg: none
                    out-of-range: none
                    invalid-chars: none
                    invalid-compare: none
                    wrong-type: none
                    invalid-refine-arg: none
                    type-limit: none
                    size-limit: none
                    no-return: none
                    throw-usage: none
                    locked-word: none
                    bad-bad: none
                    bad-make-arg: none
                    bad-to-arg: none
                    invalid-months: none
                    invalid-spec-field: none
                    missing-spec-field: none
                    move-bad: none
                    too-long: none
                    invalid-char: none
                    bad-loop-series: none
                    parse-rule: none
                    parse-end: none
                    parse-invalid-ref: none
                    parse-block: none
                    parse-unsupported: none
                    parse-infinite: none
                    parse-stack: none
                    parse-keep: none
                    parse-into-bad: none
                    invalid-draw: none
                    invalid-data-facet: none
                    face-type: none
                    not-window: none
                    bad-window: none
                    not-linked: none
                    not-event-type: none
                    invalid-facet-type: none
                    vid-invalid-syntax: none
                    rtd-invalid-syntax: none
                    rtd-no-match: none
                    react-bad-func: none
                    react-not-enough: none
                    react-no-match: none
                    react-bad-obj: none
                    react-gctx: none
                    lib-invalid-arg: none
                ]
                math: make object! [
                    code: none
                    type: none
                    zero-divide: none
                    overflow: none
                    positive: none
                ]
                access: make object! [
                    code: none
                    type: none
                    cannot-open: none
                    invalid-utf8: none
                    no-connect: none
                ]
                reserved1: make object! [
                    code: none
                    type: none
                ]
                reserved2: make object! [
                    code: none
                    type: none
                ]
                user: make object! [
                    code: none
                    type: none
                    message: none
                ]
                internal: make object! [
                    code: none
                    type: none
                    bad-path: none
                    not-here: none
                    no-memory: none
                    wrong-mem: none
                    stack-overflow: none
                    too-deep: none
                    no-cycle: none
                    feature-na: none
                    not-done: none
                    invalid-error: none
                    routines: none
                    red-system: none
                ]
            ]
        ]
        state: make object! [
            interpreted?: function!
            last-error: none
            trace: none
        ]
        modules: none
        codecs: none
        schemes: make object! [
        ]
        ports: make object! [
        ]
        locale: make object! [
            language: none
            language*: none
            locale: none
            locale*: none
            months: none
            days: none
        ]
        options: make object! [
            boot: none
            home: none
            path: none
            script: none
            cache: none
            thru-cache: none
            args: none
            do-arg: none
            debug: none
            secure: none
            quiet: none
            binary-base: none
            decimal-digits: none
            module-paths: none
            file-types: none
            float: make object! [
                pretty?: none
                full?: none
                on-change*: function!
            ]
            on-change*: function!
            on-deep-change*: function!
        ]
        script: make object! [
            title: none
            header: none
            parent: none
            path: none
            args: none
        ]
        standard: make object! [
            header: make object! [
                title: none
                name: none
                type: none
                version: none
                date: none
                file: none
                author: none
                needs: none
            ]
            error: make object! [
                code: none
                type: none
                id: none
                arg1: none
                arg2: none
                arg3: none
                near: none
                where: none
                stack: none
            ]
            file-info: make object! [
                name: none
                size: none
                date: none
                type: none
            ]
        ]
        lexer: make object! [
            pre-load: none
            throw-error: function!
            make-hm: function!
            make-msf: function!
            make-hms: function!
            make-hmsf: function!
            make-time: function!
            make-binary: function!
            make-tuple: function!
            make-number: function!
            make-float: function!
            make-hexa: function!
            make-char: function!
            push-path: function!
            set-path: function!
            make-word: function!
            to-word: function!
            pop: function!
            store: function!
            new-line: function!
            transcode: function!
        ]
        console: none
        view: none
        reactivity: make object! [
            relations: none
            queue: none
            eat-events?: none
            debug?: none
            source: none
            add-relation: function!
            eval: function!
            eval-reaction: function!
            pending?: function!
            check: function!
            is~: function!
        ]
    ] ctx210 211 none none ctx212 make object! [
        date: none
        git: none
        config: none
    ] ctx212 213 none none ctx215 make object! [
        datatypes: none
        actions: none
        natives: none
        accessors: none
        errors: make object! [
            throw: make object! [
                code: none
                type: none
                break: none
                return: none
                throw: none
                continue: none
                while-cond: none
            ]
            note: make object! [
                code: none
                type: none
                no-load: none
            ]
            syntax: make object! [
                code: none
                type: none
                invalid: none
                missing: none
                no-header: none
                no-rs-header: none
                bad-header: none
                malconstruct: none
                bad-char: none
            ]
            script: make object! [
                code: none
                type: none
                no-value: none
                need-value: none
                not-defined: none
                not-in-context: none
                no-arg: none
                expect-arg: none
                expect-val: none
                expect-type: none
                cannot-use: none
                invalid-arg: none
                invalid-type: none
                invalid-type-spec: none
                invalid-op: none
                no-op-arg: none
                bad-op-spec: none
                invalid-data: none
                invalid-part: none
                not-same-type: none
                not-same-class: none
                not-related: none
                bad-func-def: none
                bad-func-arg: none
                bad-func-extern: none
                no-refine: none
                bad-refines: none
                bad-refine: none
                word-first: none
                empty-path: none
                invalid-path: none
                invalid-path-set: none
                invalid-path-get: none
                bad-path-type: none
                bad-path-set: none
                bad-field-set: none
                dup-vars: none
                past-end: none
                missing-arg: none
                out-of-range: none
                invalid-chars: none
                invalid-compare: none
                wrong-type: none
                invalid-refine-arg: none
                type-limit: none
                size-limit: none
                no-return: none
                throw-usage: none
                locked-word: none
                bad-bad: none
                bad-make-arg: none
                bad-to-arg: none
                invalid-months: none
                invalid-spec-field: none
                missing-spec-field: none
                move-bad: none
                too-long: none
                invalid-char: none
                bad-loop-series: none
                parse-rule: none
                parse-end: none
                parse-invalid-ref: none
                parse-block: none
                parse-unsupported: none
                parse-infinite: none
                parse-stack: none
                parse-keep: none
                parse-into-bad: none
                invalid-draw: none
                invalid-data-facet: none
                face-type: none
                not-window: none
                bad-window: none
                not-linked: none
                not-event-type: none
                invalid-facet-type: none
                vid-invalid-syntax: none
                rtd-invalid-syntax: none
                rtd-no-match: none
                react-bad-func: none
                react-not-enough: none
                react-no-match: none
                react-bad-obj: none
                react-gctx: none
                lib-invalid-arg: none
            ]
            math: make object! [
                code: none
                type: none
                zero-divide: none
                overflow: none
                positive: none
            ]
            access: make object! [
                code: none
                type: none
                cannot-open: none
                invalid-utf8: none
                no-connect: none
            ]
            reserved1: make object! [
                code: none
                type: none
            ]
            reserved2: make object! [
                code: none
                type: none
            ]
            user: make object! [
                code: none
                type: none
                message: none
            ]
            internal: make object! [
                code: none
                type: none
                bad-path: none
                not-here: none
                no-memory: none
                wrong-mem: none
                stack-overflow: none
                too-deep: none
                no-cycle: none
                feature-na: none
                not-done: none
                invalid-error: none
                routines: none
                red-system: none
            ]
        ]
    ] ctx215 216 none none ctx217 make object! [
        throw: make object! [
            code: none
            type: none
            break: none
            return: none
            throw: none
            continue: none
            while-cond: none
        ]
        note: make object! [
            code: none
            type: none
            no-load: none
        ]
        syntax: make object! [
            code: none
            type: none
            invalid: none
            missing: none
            no-header: none
            no-rs-header: none
            bad-header: none
            malconstruct: none
            bad-char: none
        ]
        script: make object! [
            code: none
            type: none
            no-value: none
            need-value: none
            not-defined: none
            not-in-context: none
            no-arg: none
            expect-arg: none
            expect-val: none
            expect-type: none
            cannot-use: none
            invalid-arg: none
            invalid-type: none
            invalid-type-spec: none
            invalid-op: none
            no-op-arg: none
            bad-op-spec: none
            invalid-data: none
            invalid-part: none
            not-same-type: none
            not-same-class: none
            not-related: none
            bad-func-def: none
            bad-func-arg: none
            bad-func-extern: none
            no-refine: none
            bad-refines: none
            bad-refine: none
            word-first: none
            empty-path: none
            invalid-path: none
            invalid-path-set: none
            invalid-path-get: none
            bad-path-type: none
            bad-path-set: none
            bad-field-set: none
            dup-vars: none
            past-end: none
            missing-arg: none
            out-of-range: none
            invalid-chars: none
            invalid-compare: none
            wrong-type: none
            invalid-refine-arg: none
            type-limit: none
            size-limit: none
            no-return: none
            throw-usage: none
            locked-word: none
            bad-bad: none
            bad-make-arg: none
            bad-to-arg: none
            invalid-months: none
            invalid-spec-field: none
            missing-spec-field: none
            move-bad: none
            too-long: none
            invalid-char: none
            bad-loop-series: none
            parse-rule: none
            parse-end: none
            parse-invalid-ref: none
            parse-block: none
            parse-unsupported: none
            parse-infinite: none
            parse-stack: none
            parse-keep: none
            parse-into-bad: none
            invalid-draw: none
            invalid-data-facet: none
            face-type: none
            not-window: none
            bad-window: none
            not-linked: none
            not-event-type: none
            invalid-facet-type: none
            vid-invalid-syntax: none
            rtd-invalid-syntax: none
            rtd-no-match: none
            react-bad-func: none
            react-not-enough: none
            react-no-match: none
            react-bad-obj: none
            react-gctx: none
            lib-invalid-arg: none
        ]
        math: make object! [
            code: none
            type: none
            zero-divide: none
            overflow: none
            positive: none
        ]
        access: make object! [
            code: none
            type: none
            cannot-open: none
            invalid-utf8: none
            no-connect: none
        ]
        reserved1: make object! [
            code: none
            type: none
        ]
        reserved2: make object! [
            code: none
            type: none
        ]
        user: make object! [
            code: none
            type: none
            message: none
        ]
        internal: make object! [
            code: none
            type: none
            bad-path: none
            not-here: none
            no-memory: none
            wrong-mem: none
            stack-overflow: none
            too-deep: none
            no-cycle: none
            feature-na: none
            not-done: none
            invalid-error: none
            routines: none
            red-system: none
        ]
    ] ctx217 218 none none ctx219 make object! [
        code: none
        type: none
        break: none
        return: none
        throw: none
        continue: none
        while-cond: none
    ] ctx219 220 none none ctx221 make object! [
        code: none
        type: none
        no-load: none
    ] ctx221 222 none none ctx223 make object! [
        code: none
        type: none
        invalid: none
        missing: none
        no-header: none
        no-rs-header: none
        bad-header: none
        malconstruct: none
        bad-char: none
    ] ctx223 224 none none ctx225 make object! [
        code: none
        type: none
        no-value: none
        need-value: none
        not-defined: none
        not-in-context: none
        no-arg: none
        expect-arg: none
        expect-val: none
        expect-type: none
        cannot-use: none
        invalid-arg: none
        invalid-type: none
        invalid-type-spec: none
        invalid-op: none
        no-op-arg: none
        bad-op-spec: none
        invalid-data: none
        invalid-part: none
        not-same-type: none
        not-same-class: none
        not-related: none
        bad-func-def: none
        bad-func-arg: none
        bad-func-extern: none
        no-refine: none
        bad-refines: none
        bad-refine: none
        word-first: none
        empty-path: none
        invalid-path: none
        invalid-path-set: none
        invalid-path-get: none
        bad-path-type: none
        bad-path-set: none
        bad-field-set: none
        dup-vars: none
        past-end: none
        missing-arg: none
        out-of-range: none
        invalid-chars: none
        invalid-compare: none
        wrong-type: none
        invalid-refine-arg: none
        type-limit: none
        size-limit: none
        no-return: none
        throw-usage: none
        locked-word: none
        bad-bad: none
        bad-make-arg: none
        bad-to-arg: none
        invalid-months: none
        invalid-spec-field: none
        missing-spec-field: none
        move-bad: none
        too-long: none
        invalid-char: none
        bad-loop-series: none
        parse-rule: none
        parse-end: none
        parse-invalid-ref: none
        parse-block: none
        parse-unsupported: none
        parse-infinite: none
        parse-stack: none
        parse-keep: none
        parse-into-bad: none
        invalid-draw: none
        invalid-data-facet: none
        face-type: none
        not-window: none
        bad-window: none
        not-linked: none
        not-event-type: none
        invalid-facet-type: none
        vid-invalid-syntax: none
        rtd-invalid-syntax: none
        rtd-no-match: none
        react-bad-func: none
        react-not-enough: none
        react-no-match: none
        react-bad-obj: none
        react-gctx: none
        lib-invalid-arg: none
    ] ctx225 226 none none ctx227 make object! [
        code: none
        type: none
        zero-divide: none
        overflow: none
        positive: none
    ] ctx227 228 none none ctx229 make object! [
        code: none
        type: none
        cannot-open: none
        invalid-utf8: none
        no-connect: none
    ] ctx229 230 none none ctx231 make object! [
        code: none
        type: none
    ] ctx231 232 none none ctx233 make object! [
        code: none
        type: none
    ] ctx233 234 none none ctx235 make object! [
        code: none
        type: none
        message: none
    ] ctx235 236 none none ctx237 make object! [
        code: none
        type: none
        bad-path: none
        not-here: none
        no-memory: none
        wrong-mem: none
        stack-overflow: none
        too-deep: none
        no-cycle: none
        feature-na: none
        not-done: none
        invalid-error: none
        routines: none
        red-system: none
    ] ctx237 238 none none ctx239 make object! [
        interpreted?: function!
        last-error: none
        trace: none
    ] ctx239 240 none none ctx242 make object! [
    ] ctx242 243 none none ctx244 make object! [
    ] ctx244 245 none none ctx246 make object! [
        language: none
        language*: none
        locale: none
        locale*: none
        months: none
        days: none
    ] ctx246 247 none none ctx248 make object! [
        boot: none
        home: none
        path: none
        script: none
        cache: none
        thru-cache: none
        args: none
        do-arg: none
        debug: none
        secure: none
        quiet: none
        binary-base: none
        decimal-digits: none
        module-paths: none
        file-types: none
        float: make object! [
            pretty?: none
            full?: none
            on-change*: function!
        ]
        on-change*: function!
        on-deep-change*: function!
    ] ctx248 249 none [16 0 17 0 evt249] ctx250 make object! [
        pretty?: none
        full?: none
        on-change*: function!
    ] ctx250 251 none [2 0 -1 0 evt251] ctx255 make object! [
        title: none
        header: none
        parent: none
        path: none
        args: none
    ] ctx255 256 none none ctx257 make object! [
        header: make object! [
            title: none
            name: none
            type: none
            version: none
            date: none
            file: none
            author: none
            needs: none
        ]
        error: make object! [
            code: none
            type: none
            id: none
            arg1: none
            arg2: none
            arg3: none
            near: none
            where: none
            stack: none
        ]
        file-info: make object! [
            name: none
            size: none
            date: none
            type: none
        ]
    ] ctx257 258 none none ctx259 make object! [
        title: none
        name: none
        type: none
        version: none
        date: none
        file: none
        author: none
        needs: none
    ] ctx259 260 none none ctx261 make object! [
        code: none
        type: none
        id: none
        arg1: none
        arg2: none
        arg3: none
        near: none
        where: none
        stack: none
    ] ctx261 262 none none ctx263 make object! [
        name: none
        size: none
        date: none
        type: none
    ] ctx263 264 none none ctx265 make object! [
        pre-load: none
        throw-error: function!
        make-hm: function!
        make-msf: function!
        make-hms: function!
        make-hmsf: function!
        make-time: function!
        make-binary: function!
        make-tuple: function!
        make-number: function!
        make-float: function!
        make-hexa: function!
        make-char: function!
        push-path: function!
        set-path: function!
        make-word: function!
        to-word: function!
        pop: function!
        store: function!
        new-line: function!
        transcode: function!
    ] ctx265 266 none none none make object! [
        title: none
        name: none
        mime-type: none
        suffixes: none
        encode: function!
        decode: function!
    ] ctx273 274 none none none make object! [
        title: none
        name: none
        mime-type: none
        suffixes: none
        encode: function!
        decode: function!
    ] ctx276 277 none none none make object! [
        title: none
        name: none
        mime-type: none
        suffixes: none
        encode: function!
        decode: function!
    ] ctx279 280 none none context make object! [
        title: none
        name: none
        mime-type: none
        suffixes: none
        encode: function!
        decode: function!
    ] ctx282 283 none none none make object! [
        title: none
        name: none
        mime-type: none
        suffixes: none
        encode: function!
        decode: function!
    ] ctx282 283 none none 
    reactor! make object! [
        on-change*: function!
    ] ctx285 286 none [0 2 -1 0 evt286] 
    deep-reactor! make object! [
        on-change*: function!
        on-deep-change*: function!
    ] ctx288 289 [make object! [
            on-change*: function!
        ]] [0 2 1 0 evt289] ctx291 make object! [
        relations: none
        queue: none
        eat-events?: none
        debug?: none
        source: none
        add-relation: function!
        eval: function!
        eval-reaction: function!
        pending?: function!
        check: function!
        is~: function!
    ] ctx291 292 none none none make object! [
        title: none
        name: none
        mime-type: none
        suffixes: none
        encode: function!
        decode: function!
    ] ctx282 283 none none 
    preprocessor make object! [
        exec: none
        protos: none
        macros: none
        stack: none
        syms: none
        depth: none
        active?: none
        trace?: none
        s: none
        do-quit: function!
        throw-error: function!
        syntax-error: function!
        do-safe: function!
        do-code: function!
        count-args: function!
        func-arity?: function!
        fetch-next: function!
        eval: function!
        do-macro: function!
        register-macro: function!
        reset: function!
        expand: function!
    ] ctx304 305 none none none make object! [
        title: none
        name: none
        mime-type: none
        suffixes: none
        encode: function!
        decode: function!
    ] ctx282 283 none none 
    a make object! [
        b: function!
    ] ctx361 362 none none
]
symbols: make hash! [datatype! [~datatype! 1] 
    make [~make 2] unset! [~unset! 3] none! [~none! 4] logic! [~logic! 5] block! [~block! 6] string! [~string! 7] integer! [~integer! 8] word! [~word! 9] error! [~error! 10] typeset! [~typeset! 11] file! [~file! 12] url! [~url! 13] set-word! [~set-word! 14] get-word! [~get-word! 15] lit-word! [~lit-word! 16] refinement! [~refinement! 17] binary! [~binary! 18] paren! [~paren! 19] char! [~char! 20] issue! [~issue! 21] path! [~path! 22] set-path! [~set-path! 23] get-path! [~get-path! 24] lit-path! [~lit-path! 25] native! [~native! 26] action! [~action! 27] op! [~op! 28] function! [~function! 29] routine! [~routine! 30] object! [~object! 31] bitset! [~bitset! 32] float! [~float! 33] point! [~point! 34] vector! [~vector! 35] map! [~map! 36] hash! [~hash! 37] pair! [~pair! 38] percent! [~percent! 39] tuple! [~tuple! 40] image! [~image! 41] time! [~time! 42] tag! [~tag! 43] email! [~email! 44] handle! [~handle! 45] date! [~date! 46] none [~none 47] set [~set 48] true [~true 49] false [~false 50] random [~random 51] reflect [~reflect 52] to [~to 53] form [~form 54] mold [~mold 55] modify [~modify 56] absolute [~absolute 57] add [~add 58] divide [~divide 59] multiply [~multiply 60] negate [~negate 61] power [~power 62] remainder [~remainder 63] round [~round 64] subtract [~subtract 65] even? [~even? 66] odd? [~odd? 67] complement [~complement 68] append [~append 69] at [~at 70] back [~back 71] change [~change 72] clear [~clear 73] copy [~copy 74] find [~find 75] head [~head 76] head? [~head? 77] index? [~index? 78] insert [~insert 79] length? [~length? 80] move [~move 81] next [~next 82] pick [~pick 83] poke [~poke 84] put [~put 85] remove [~remove 86] reverse [~reverse 87] select [~select 88] sort [~sort 89] skip [~skip 90] swap [~swap 91] tail [~tail 92] tail? [~tail? 93] take [~take 94] trim [~trim 95] delete [~delete 96] query [~query 97] read [~read 98] write [~write 99] if [~if 100] unless [~unless 101] either [~either 102] any [~any 103] all [~all 104] while [~while 105] until [~until 106] loop [~loop 107] repeat [~repeat 108] forever [~forever 109] foreach [~foreach 110] forall [~forall 111] remove-each [~remove-each 112] func [~func 113] function [~function 114] does [~does 115] has [~has 116] switch [~switch 117] case [~case 118] do [~do 119] reduce [~reduce 120] compose [~compose 121] get [~get 122] print [~print 123] prin [~prin 124] equal? [~equal? 125] not-equal? [~not-equal? 126] strict-equal? [~strict-equal? 127] lesser? [~lesser? 128] greater? [~greater? 129] lesser-or-equal? [~lesser-or-equal? 130] greater-or-equal? [~greater-or-equal? 131] same? [~same? 132] not [~not 133] type? [~type? 134] stats [~stats 135] bind [~bind 136] in [~in 137] parse [~parse 138] union [~union 139] unique [~unique 140] intersect [~intersect 141] difference [~difference 142] exclude [~exclude 143] complement? [~complement? 144] dehex [~dehex 145] negative? [~negative? 146] positive? [~positive? 147] max [~max 148] min [~min 149] shift [~shift 150] to-hex [~to-hex 151] sine [~sine 152] cosine [~cosine 153] tangent [~tangent 154] arcsine [~arcsine 155] arccosine [~arccosine 156] arctangent [~arctangent 157] arctangent2 [~arctangent2 158] NaN? [~NaN? 159] zero? [~zero? 160] log-2 [~log-2 161] log-10 [~log-10 162] log-e [~log-e 163] exp [~exp 164] square-root [~square-root 165] construct [~construct 166] value? [~value? 167] try [~try 168] uppercase [~uppercase 169] lowercase [~lowercase 170] as-pair [~as-pair 171] break [~break 172] continue [~continue 173] exit [~exit 174] return [~return 175] throw [~throw 176] catch [~catch 177] extend [~extend 178] debase [~debase 179] enbase [~enbase 180] to-local-file [~to-local-file 181] wait [~wait 182] checksum [~checksum 183] unset [~unset 184] new-line [~new-line 185] new-line? [~new-line? 186] context? [~context? 187] set-env [~set-env 188] get-env [~get-env 189] list-env [~list-env 190] now [~now 191] sign? [~sign? 192] as [~as 193] call [~call 194] size? [~size? 195] browse [~browse 196] decompress [~decompress 197] recycle [~recycle 198] quit-return [~quit-return 199] set-quiet [~set-quiet 200] shift-right [~shift-right 201] shift-left [~shift-left 202] shift-logical [~shift-logical 203] last-lf? [~last-lf? 204] get-current-dir [~get-current-dir 205] set-current-dir [~set-current-dir 206] create-dir [~create-dir 207] exists? [~exists? 208] os-info [~os-info 209] as-color [~as-color 210] as-ipv4 [~as-ipv4 211] as-rgba [~as-rgba 212] read-clipboard [~read-clipboard 213] write-clipboard [~write-clipboard 214] write-stdout [~write-stdout 215] yes [~yes 216] on [~on 217] no [~no 218] off [~off 219] tab [~tab 220] cr [~cr 221] newline [~newline 222] lf [~lf 223] escape [~escape 224] slash [~slash 225] sp [~sp 226] space [~space 227] null [~null 228] crlf [~crlf 229] dot [~dot 230] comma [~comma 231] dbl-quote [~dbl-quote 232] pi [~pi 233] Rebol [~Rebol 234] internal! [~internal! 235] external! [~external! 236] number! [~number! 237] scalar! [~scalar! 238] any-word! [~any-word! 239] all-word! [~all-word! 240] any-list! [~any-list! 241] any-path! [~any-path! 242] any-block! [~any-block! 243] any-function! [~any-function! 244] any-object! [~any-object! 245] any-string! [~any-string! 246] series! [~series! 247] immediate! [~immediate! 248] default! [~default! 249] any-type! [~any-type! 250] aqua [~aqua 251] beige [~beige 252] black [~black 253] blue [~blue 254] brick [~brick 255] brown [~brown 256] coal [~coal 257] coffee [~coffee 258] crimson [~crimson 259] cyan [~cyan 260] forest [~forest 261] gold [~gold 262] gray [~gray 263] green [~green 264] ivory [~ivory 265] khaki [~khaki 266] leaf [~leaf 267] linen [~linen 268] magenta [~magenta 269] maroon [~maroon 270] mint [~mint 271] navy [~navy 272] oldrab [~oldrab 273] olive [~olive 274] orange [~orange 275] papaya [~papaya 276] pewter [~pewter 277] pink [~pink 278] purple [~purple 279] reblue [~reblue 280] rebolor [~rebolor 281] red [~red 282] sienna [~sienna 283] silver [~silver 284] sky [~sky 285] snow [~snow 286] tanned [~tanned 287] teal [~teal 288] violet [~violet 289] water [~water 290] wheat [~wheat 291] white [~white 292] yello [~yello 293] yellow [~yellow 294] glass [~glass 295] transparent [~transparent 296] routine [~routine 297] alert [~alert 298] also [~also 299] attempt [~attempt 300] comment [~comment 301] quit [~quit 302] empty? [~empty? 303] ?? [~?? 304] probe [~probe 305] quote [~quote 306] first [~first 307] second [~second 308] third [~third 309] fourth [~fourth 310] fifth [~fifth 311] last [~last 312] spec-of [~spec-of 313] body-of [~body-of 314] words-of [~words-of 315] class-of [~class-of 316] values-of [~values-of 317] bitset? [~bitset? 318] binary? [~binary? 319] block? [~block? 320] char? [~char? 321] email? [~email? 322] file? [~file? 323] float? [~float? 324] get-path? [~get-path? 325] get-word? [~get-word? 326] hash? [~hash? 327] integer? [~integer? 328] issue? [~issue? 329] lit-path? [~lit-path? 330] lit-word? [~lit-word? 331] logic? [~logic? 332] map? [~map? 333] none? [~none? 334] pair? [~pair? 335] paren? [~paren? 336] path? [~path? 337] percent? [~percent? 338] refinement? [~refinement? 339] set-path? [~set-path? 340] set-word? [~set-word? 341] string? [~string? 342] tag? [~tag? 343] time? [~time? 344] typeset? [~typeset? 345] tuple? [~tuple? 346] unset? [~unset? 347] url? [~url? 348] word? [~word? 349] image? [~image? 350] date? [~date? 351] handle? [~handle? 352] error? [~error? 353] action? [~action? 354] native? [~native? 355] datatype? [~datatype? 356] function? [~function? 357] object? [~object? 358] op? [~op? 359] routine? [~routine? 360] vector? [~vector? 361] any-list? [~any-list? 362] any-block? [~any-block? 363] any-function? [~any-function? 364] any-object? [~any-object? 365] any-path? [~any-path? 366] any-string? [~any-string? 367] any-word? [~any-word? 368] series? [~series? 369] number? [~number? 370] immediate? [~immediate? 371] scalar? [~scalar? 372] all-word? [~all-word? 373] to-bitset [~to-bitset 374] to-binary [~to-binary 375] to-block [~to-block 376] to-char [~to-char 377] to-email [~to-email 378] to-file [~to-file 379] to-float [~to-float 380] to-get-path [~to-get-path 381] to-get-word [~to-get-word 382] to-hash [~to-hash 383] to-integer [~to-integer 384] to-issue [~to-issue 385] to-lit-path [~to-lit-path 386] to-lit-word [~to-lit-word 387] to-logic [~to-logic 388] to-map [~to-map 389] to-none [~to-none 390] to-pair [~to-pair 391] to-paren [~to-paren 392] to-path [~to-path 393] to-percent [~to-percent 394] to-refinement [~to-refinement 395] to-set-path [~to-set-path 396] to-set-word [~to-set-word 397] to-string [~to-string 398] to-tag [~to-tag 399] to-time [~to-time 400] to-typeset [~to-typeset 401] to-tuple [~to-tuple 402] to-unset [~to-unset 403] to-url [~to-url 404] to-word [~to-word 405] to-image [~to-image 406] to-date [~to-date 407] context [~context 408] alter [~alter 409] offset? [~offset? 410] repend [~repend 411] replace [~replace 412] math [~math 413] charset [~charset 414] p-indent [~p-indent 415] on-parse-event [~on-parse-event 416] parse-trace [~parse-trace 417] suffix? [~suffix? 418] load [~load 419] save [~save 420] cause-error [~cause-error 421] pad [~pad 422] mod [~mod 423] modulo [~modulo 424] eval-set-path [~eval-set-path 425] to-red-file [~to-red-file 426] dir? [~dir? 427] normalize-dir [~normalize-dir 428] what-dir [~what-dir 429] change-dir [~change-dir 430] make-dir [~make-dir 431] extract [~extract 432] extract-boot-args [~extract-boot-args 433] collect [~collect 434] flip-exe-flag [~flip-exe-flag 435] split [~split 436] dirize [~dirize 437] clean-path [~clean-path 438] split-path [~split-path 439] do-file [~do-file 440] path-thru [~path-thru 441] exists-thru? [~exists-thru? 442] read-thru [~read-thru 443] load-thru [~load-thru 444] do-thru [~do-thru 445] cos [~cos 446] sin [~sin 447] tan [~tan 448] acos [~acos 449] asin [~asin 450] atan [~atan 451] atan2 [~atan2 452] sqrt [~sqrt 453] to-UTC-date [~to-UTC-date 454] to-local-date [~to-local-date 455] rejoin [~rejoin 456] sum [~sum 457] average [~average 458] single? [~single? 459] last? [~last? 460] keys-of [~keys-of 461] object [~object 462] halt [~halt 463] system [~system 464] body [~body 465] version [~version 466] build [~build 467] date [~date 468] git [~git 469] config [~config 470] words [~words 471] platform [~platform 472] catalog [~catalog 473] datatypes [~datatypes 474] actions [~actions 475] natives [~natives 476] accessors [~accessors 477] errors [~errors 478] code [~code 479] type [~type 480] while-cond [~while-cond 481] note [~note 482] no-load [~no-load 483] syntax [~syntax 484] invalid [~invalid 485] missing [~missing 486] no-header [~no-header 487] no-rs-header [~no-rs-header 488] bad-header [~bad-header 489] malconstruct [~malconstruct 490] bad-char [~bad-char 491] script [~script 492] no-value [~no-value 493] need-value [~need-value 494] not-defined [~not-defined 495] not-in-context [~not-in-context 496] no-arg [~no-arg 497] expect-arg [~expect-arg 498] expect-val [~expect-val 499] expect-type [~expect-type 500] cannot-use [~cannot-use 501] invalid-arg [~invalid-arg 502] invalid-type [~invalid-type 503] invalid-type-spec [~invalid-type-spec 504] invalid-op [~invalid-op 505] no-op-arg [~no-op-arg 506] bad-op-spec [~bad-op-spec 507] invalid-data [~invalid-data 508] invalid-part [~invalid-part 509] not-same-type [~not-same-type 510] not-same-class [~not-same-class 511] not-related [~not-related 512] bad-func-def [~bad-func-def 513] bad-func-arg [~bad-func-arg 514] bad-func-extern [~bad-func-extern 515] no-refine [~no-refine 516] bad-refines [~bad-refines 517] bad-refine [~bad-refine 518] word-first [~word-first 519] empty-path [~empty-path 520] invalid-path [~invalid-path 521] invalid-path-set [~invalid-path-set 522] invalid-path-get [~invalid-path-get 523] bad-path-type [~bad-path-type 524] bad-path-set [~bad-path-set 525] bad-field-set [~bad-field-set 526] dup-vars [~dup-vars 527] past-end [~past-end 528] missing-arg [~missing-arg 529] out-of-range [~out-of-range 530] invalid-chars [~invalid-chars 531] invalid-compare [~invalid-compare 532] wrong-type [~wrong-type 533] invalid-refine-arg [~invalid-refine-arg 534] type-limit [~type-limit 535] size-limit [~size-limit 536] no-return [~no-return 537] throw-usage [~throw-usage 538] locked-word [~locked-word 539] bad-bad [~bad-bad 540] bad-make-arg [~bad-make-arg 541] bad-to-arg [~bad-to-arg 542] invalid-months [~invalid-months 543] invalid-spec-field [~invalid-spec-field 544] missing-spec-field [~missing-spec-field 545] move-bad [~move-bad 546] too-long [~too-long 547] invalid-char [~invalid-char 548] bad-loop-series [~bad-loop-series 549] parse-rule [~parse-rule 550] parse-end [~parse-end 551] parse-invalid-ref [~parse-invalid-ref 552] parse-block [~parse-block 553] parse-unsupported [~parse-unsupported 554] parse-infinite [~parse-infinite 555] parse-stack [~parse-stack 556] parse-keep [~parse-keep 557] parse-into-bad [~parse-into-bad 558] invalid-draw [~invalid-draw 559] invalid-data-facet [~invalid-data-facet 560] face-type [~face-type 561] not-window [~not-window 562] bad-window [~bad-window 563] not-linked [~not-linked 564] not-event-type [~not-event-type 565] invalid-facet-type [~invalid-facet-type 566] vid-invalid-syntax [~vid-invalid-syntax 567] rtd-invalid-syntax [~rtd-invalid-syntax 568] rtd-no-match [~rtd-no-match 569] react-bad-func [~react-bad-func 570] react-not-enough [~react-not-enough 571] react-no-match [~react-no-match 572] react-bad-obj [~react-bad-obj 573] react-gctx [~react-gctx 574] lib-invalid-arg [~lib-invalid-arg 575] zero-divide [~zero-divide 576] overflow [~overflow 577] positive [~positive 578] access [~access 579] cannot-open [~cannot-open 580] invalid-utf8 [~invalid-utf8 581] no-connect [~no-connect 582] reserved1 [~reserved1 583] reserved2 [~reserved2 584] user [~user 585] message [~message 586] internal [~internal 587] bad-path [~bad-path 588] not-here [~not-here 589] no-memory [~no-memory 590] wrong-mem [~wrong-mem 591] stack-overflow [~stack-overflow 592] too-deep [~too-deep 593] no-cycle [~no-cycle 594] feature-na [~feature-na 595] not-done [~not-done 596] invalid-error [~invalid-error 597] routines [~routines 598] red-system [~red-system 599] state [~state 600] interpreted? [~interpreted? 601] last-error [~last-error 602] trace [~trace 603] modules [~modules 604] codecs [~codecs 605] schemes [~schemes 606] ports [~ports 607] locale [~locale 608] language [~language 609] language* [~language* 610] locale* [~locale* 611] months [~months 612] days [~days 613] options [~options 614] boot [~boot 615] home [~home 616] path [~path 617] cache [~cache 618] thru-cache [~thru-cache 619] args [~args 620] do-arg [~do-arg 621] debug [~debug 622] secure [~secure 623] quiet [~quiet 624] binary-base [~binary-base 625] decimal-digits [~decimal-digits 626] module-paths [~module-paths 627] file-types [~file-types 628] float [~float 629] pretty? [~pretty? 630] full? [~full? 631] on-change* [~on-change* 632] on-deep-change* [~on-deep-change* 633] title [~title 634] header [~header 635] parent [~parent 636] standard [~standard 637] name [~name 638] file [~file 639] author [~author 640] needs [~needs 641] error [~error 642] id [~id 643] arg1 [~arg1 644] arg2 [~arg2 645] arg3 [~arg3 646] near [~near 647] where [~where 648] stack [~stack 649] file-info [~file-info 650] size [~size 651] lexer [~lexer 652] console [~console 653] view [~view 654] reactivity [~reactivity 655] pre-load [~pre-load 656] throw-error [~throw-error 657] make-hm [~make-hm 658] make-msf [~make-msf 659] make-hms [~make-hms 660] make-hmsf [~make-hmsf 661] make-time [~make-time 662] make-binary [~make-binary 663] make-tuple [~make-tuple 664] make-number [~make-number 665] make-float [~make-float 666] make-hexa [~make-hexa 667] make-char [~make-char 668] push-path [~push-path 669] set-path [~set-path 670] make-word [~make-word 671] pop [~pop 672] store [~store 673] transcode [~transcode 674] + [~+ 675] - [~- 676] * [~* 677] / [~/ 678] // [~// 679] % [~% 680] = [~= 681] <> [~<> 682] == [~== 683] =? [~=? 684] < [~< 685] > [~> 686] <= [~<= 687] >= [~>= 688] << [~<< 689] >> [~>> 690] >>> [~>>> 691] ** [~** 692] and [~and 693] or [~or 694] xor [~xor 695] eval-path [~eval-path 696] png [~png 697] PNG [~PNG1 698] mime-type [~mime-type 699] suffixes [~suffixes 700] encode [~encode 701] decode [~decode 702] jpeg [~jpeg 703] JPEG [~JPEG2 704] bmp [~bmp 705] BMP [~BMP3 706] gif [~gif 707] GIF [~GIF4 708] reactor! [~reactor! 709] deep-reactor! [~deep-reactor! 710] relations [~relations 711] queue [~queue 712] eat-events? [~eat-events? 713] debug? [~debug? 714] source [~source 715] add-relation [~add-relation 716] eval [~eval 717] eval-reaction [~eval-reaction 718] pending? [~pending? 719] check [~check 720] stop-reactor [~stop-reactor 721] clear-reactions [~clear-reactions 722] dump-reactions [~dump-reactions 723] is [~is 724] react? [~react? 725] react [~react 726] preprocessor [~preprocessor 727] exec [~exec 728] protos [~protos 729] macros [~macros 730] syms [~syms 731] depth [~depth 732] active? [~active? 733] trace? [~trace? 734] s [~s 735] do-quit [~do-quit 736] syntax-error [~syntax-error 737] do-safe [~do-safe 738] do-code [~do-code 739] count-args [~count-args 740] func-arity? [~func-arity? 741] fetch-next [~fetch-next 742] do-macro [~do-macro 743] register-macro [~register-macro 744] reset [~reset 745] expand [~expand 746] expand-directives [~expand-directives 747] image?||320 [~image?||320 748] Windows [~Windows 749] flags [~flags 750] modal [~modal 751] value1 [~value1 752] value [~value 753] spec [~spec 754] class [~class 755] values [~values 756] select-key* [~select-key* 757] codec [~codec 758] mime [~mime 759] Content-Type [~Content-Type 760] part [~part 761] one [~one 762] 
    else [~else 763] out [~out 764] length [~length 765] k [~k 766] v [~v 767] dir [~dir 768] series [~series 769] pos [~pos 770] keep [~keep 771] flag [~flag 772] so [~so 773] MD5 [~MD5 774] timezone [~timezone 775] src [~src 776] cs [~cs 777] 
    digit [~digit 778] hexa-upper [~hexa-upper 779] hexa-lower [~hexa-lower 780] hexa [~hexa 781] hexa-char [~hexa-char 782] not-word-char [~not-word-char 783] not-word-1st [~not-word-1st 784] 
    not-file-char [~not-file-char 785] not-str-char [~not-str-char 786] not-mstr-char [~not-mstr-char 787] caret-char [~caret-char 788] 
    non-printable-char [~non-printable-char 789] integer-end [~integer-end 790] ws-ASCII [~ws-ASCII 791] ws-U+2k [~ws-U+2k 792] control-char [~control-char 793] 
    four [~four 794] half [~half 795] non-zero [~non-zero 796] path-end [~path-end 797] base64-char [~base64-char 798] slash-end [~slash-end 799] not-url-char [~not-url-char 800] email-end [~email-end 801] 
    pair-end [~pair-end 802] file-end [~file-end 803] date-sep [~date-sep 804] time-sep [~time-sep 805] not-tag-1st [~not-tag-1st 806] err [~err 807] srs [~srs 808] owned [~owned 809] only [~only 810] result [~result 811] q [~q 812] list [~list 813] face [~face 814] pane [~pane 815] f [~f 816] x [~x 817] obj [~obj 818] field [~field 819] reaction [~reaction 820] target [~target 821] halt-request [~halt-request 822] res [~res 823] macro [~macro 824] word [~word 825] p [~p 826] | [~| 827] 
    and~ [~and~ 828] 
    or~ [~or~ 829] 
    xor~ [~xor~ 830] 
    ctx210~platform [~ctx210~platform 831] 
    ctx239~interpreted? [~ctx239~interpreted? 832] 
    ctx250~on-change* [~ctx250~on-change* 833] 
    ctx248~on-change* [~ctx248~on-change* 834] 
    ctx248~on-deep-change* [~ctx248~on-deep-change* 835] 
    ctx265~throw-error [~ctx265~throw-error 836] 
    ctx265~make-hm [~ctx265~make-hm 837] 
    ctx265~make-msf [~ctx265~make-msf 838] 
    ctx265~make-hms [~ctx265~make-hms 839] 
    ctx265~make-hmsf [~ctx265~make-hmsf 840] 
    ctx265~make-time [~ctx265~make-time 841] 
    ctx265~make-binary [~ctx265~make-binary 842] 
    ctx265~make-tuple [~ctx265~make-tuple 843] 
    ctx265~make-number [~ctx265~make-number 844] 
    ctx265~make-float [~ctx265~make-float 845] 
    ctx265~make-hexa [~ctx265~make-hexa 846] 
    ctx265~make-char [~ctx265~make-char 847] 
    ctx265~push-path [~ctx265~push-path 848] 
    ctx265~set-path [~ctx265~set-path 849] 
    ctx265~make-word [~ctx265~make-word 850] 
    ctx265~to-word [~ctx265~to-word 851] 
    ctx265~pop [~ctx265~pop 852] 
    ctx265~store [~ctx265~store 853] 
    ctx265~new-line [~ctx265~new-line 854] 
    ctx265~transcode [~ctx265~transcode 855] 
    ctx273~encode [~ctx273~encode 856] 
    ctx273~decode [~ctx273~decode 857] 
    ctx276~encode [~ctx276~encode 858] 
    ctx276~decode [~ctx276~decode 859] 
    ctx279~encode [~ctx279~encode 860] 
    ctx279~decode [~ctx279~decode 861] 
    ctx282~encode [~ctx282~encode 862] 
    ctx282~decode [~ctx282~decode 863] 
    ctx285~on-change* [~ctx285~on-change* 864] 
    ctx288~on-change* [~ctx288~on-change* 865] 
    ctx288~on-deep-change* [~ctx288~on-deep-change* 866] 
    ctx291~add-relation [~ctx291~add-relation 867] 
    ctx291~eval [~ctx291~eval 868] 
    ctx291~eval-reaction [~ctx291~eval-reaction 869] 
    ctx291~pending? [~ctx291~pending? 870] 
    ctx291~check [~ctx291~check 871] 
    ctx291~is~ [~ctx291~is~ 872] 
    ctx304~do-quit [~ctx304~do-quit 873] 
    ctx304~throw-error [~ctx304~throw-error 874] 
    ctx304~syntax-error [~ctx304~syntax-error 875] 
    ctx304~do-safe [~ctx304~do-safe 876] 
    ctx304~do-code [~ctx304~do-code 877] 
    ctx304~count-args [~ctx304~count-args 878] 
    ctx304~func-arity? [~ctx304~func-arity? 879] 
    ctx304~fetch-next [~ctx304~fetch-next 880] 
    ctx304~eval [~ctx304~eval 881] 
    ctx304~do-macro [~ctx304~do-macro 882] 
    ctx304~register-macro [~ctx304~register-macro 883] 
    ctx304~reset [~ctx304~reset 884] 
    ctx304~expand [~ctx304~expand 885] a [~a 886] b [~b 887] ctx361~b [~ctx361~b 888]
]
sym-table: [
    ~datatype!: word/load "datatype!" 
    ~make: word/load "make" 
    ~unset!: word/load "unset!" 
    ~none!: word/load "none!" 
    ~logic!: word/load "logic!" 
    ~block!: word/load "block!" 
    ~string!: word/load "string!" 
    ~integer!: word/load "integer!" 
    ~word!: word/load "word!" 
    ~error!: word/load "error!" 
    ~typeset!: word/load "typeset!" 
    ~file!: word/load "file!" 
    ~url!: word/load "url!" 
    ~set-word!: word/load "set-word!" 
    ~get-word!: word/load "get-word!" 
    ~lit-word!: word/load "lit-word!" 
    ~refinement!: word/load "refinement!" 
    ~binary!: word/load "binary!" 
    ~paren!: word/load "paren!" 
    ~char!: word/load "char!" 
    ~issue!: word/load "issue!" 
    ~path!: word/load "path!" 
    ~set-path!: word/load "set-path!" 
    ~get-path!: word/load "get-path!" 
    ~lit-path!: word/load "lit-path!" 
    ~native!: word/load "native!" 
    ~action!: word/load "action!" 
    ~op!: word/load "op!" 
    ~function!: word/load "function!" 
    ~routine!: word/load "routine!" 
    ~object!: word/load "object!" 
    ~bitset!: word/load "bitset!" 
    ~float!: word/load "float!" 
    ~point!: word/load "point!" 
    ~vector!: word/load "vector!" 
    ~map!: word/load "map!" 
    ~hash!: word/load "hash!" 
    ~pair!: word/load "pair!" 
    ~percent!: word/load "percent!" 
    ~tuple!: word/load "tuple!" 
    ~image!: word/load "image!" 
    ~time!: word/load "time!" 
    ~tag!: word/load "tag!" 
    ~email!: word/load "email!" 
    ~handle!: word/load "handle!" 
    ~date!: word/load "date!" 
    ~none: word/load "none" 
    ~set: word/load "set" 
    ~true: word/load "true" 
    ~false: word/load "false" 
    ~random: word/load "random" 
    ~reflect: word/load "reflect" 
    ~to: word/load "to" 
    ~form: word/load "form" 
    ~mold: word/load "mold" 
    ~modify: word/load "modify" 
    ~absolute: word/load "absolute" 
    ~add: word/load "add" 
    ~divide: word/load "divide" 
    ~multiply: word/load "multiply" 
    ~negate: word/load "negate" 
    ~power: word/load "power" 
    ~remainder: word/load "remainder" 
    ~round: word/load "round" 
    ~subtract: word/load "subtract" 
    ~even?: word/load "even?" 
    ~odd?: word/load "odd?" 
    ~complement: word/load "complement" 
    ~append: word/load "append" 
    ~at: word/load "at" 
    ~back: word/load "back" 
    ~change: word/load "change" 
    ~clear: word/load "clear" 
    ~copy: word/load "copy" 
    ~find: word/load "find" 
    ~head: word/load "head" 
    ~head?: word/load "head?" 
    ~index?: word/load "index?" 
    ~insert: word/load "insert" 
    ~length?: word/load "length?" 
    ~move: word/load "move" 
    ~next: word/load "next" 
    ~pick: word/load "pick" 
    ~poke: word/load "poke" 
    ~put: word/load "put" 
    ~remove: word/load "remove" 
    ~reverse: word/load "reverse" 
    ~select: word/load "select" 
    ~sort: word/load "sort" 
    ~skip: word/load "skip" 
    ~swap: word/load "swap" 
    ~tail: word/load "tail" 
    ~tail?: word/load "tail?" 
    ~take: word/load "take" 
    ~trim: word/load "trim" 
    ~delete: word/load "delete" 
    ~query: word/load "query" 
    ~read: word/load "read" 
    ~write: word/load "write" 
    ~if: word/load "if" 
    ~unless: word/load "unless" 
    ~either: word/load "either" 
    ~any: word/load "any" 
    ~all: word/load "all" 
    ~while: word/load "while" 
    ~until: word/load "until" 
    ~loop: word/load "loop" 
    ~repeat: word/load "repeat" 
    ~forever: word/load "forever" 
    ~foreach: word/load "foreach" 
    ~forall: word/load "forall" 
    ~remove-each: word/load "remove-each" 
    ~func: word/load "func" 
    ~function: word/load "function" 
    ~does: word/load "does" 
    ~has: word/load "has" 
    ~switch: word/load "switch" 
    ~case: word/load "case" 
    ~do: word/load "do" 
    ~reduce: word/load "reduce" 
    ~compose: word/load "compose" 
    ~get: word/load "get" 
    ~print: word/load "print" 
    ~prin: word/load "prin" 
    ~equal?: word/load "equal?" 
    ~not-equal?: word/load "not-equal?" 
    ~strict-equal?: word/load "strict-equal?" 
    ~lesser?: word/load "lesser?" 
    ~greater?: word/load "greater?" 
    ~lesser-or-equal?: word/load "lesser-or-equal?" 
    ~greater-or-equal?: word/load "greater-or-equal?" 
    ~same?: word/load "same?" 
    ~not: word/load "not" 
    ~type?: word/load "type?" 
    ~stats: word/load "stats" 
    ~bind: word/load "bind" 
    ~in: word/load "in" 
    ~parse: word/load "parse" 
    ~union: word/load "union" 
    ~unique: word/load "unique" 
    ~intersect: word/load "intersect" 
    ~difference: word/load "difference" 
    ~exclude: word/load "exclude" 
    ~complement?: word/load "complement?" 
    ~dehex: word/load "dehex" 
    ~negative?: word/load "negative?" 
    ~positive?: word/load "positive?" 
    ~max: word/load "max" 
    ~min: word/load "min" 
    ~shift: word/load "shift" 
    ~to-hex: word/load "to-hex" 
    ~sine: word/load "sine" 
    ~cosine: word/load "cosine" 
    ~tangent: word/load "tangent" 
    ~arcsine: word/load "arcsine" 
    ~arccosine: word/load "arccosine" 
    ~arctangent: word/load "arctangent" 
    ~arctangent2: word/load "arctangent2" 
    ~NaN?: word/load "NaN?" 
    ~zero?: word/load "zero?" 
    ~log-2: word/load "log-2" 
    ~log-10: word/load "log-10" 
    ~log-e: word/load "log-e" 
    ~exp: word/load "exp" 
    ~square-root: word/load "square-root" 
    ~construct: word/load "construct" 
    ~value?: word/load "value?" 
    ~try: word/load "try" 
    ~uppercase: word/load "uppercase" 
    ~lowercase: word/load "lowercase" 
    ~as-pair: word/load "as-pair" 
    ~break: word/load "break" 
    ~continue: word/load "continue" 
    ~exit: word/load "exit" 
    ~return: word/load "return" 
    ~throw: word/load "throw" 
    ~catch: word/load "catch" 
    ~extend: word/load "extend" 
    ~debase: word/load "debase" 
    ~enbase: word/load "enbase" 
    ~to-local-file: word/load "to-local-file" 
    ~wait: word/load "wait" 
    ~checksum: word/load "checksum" 
    ~unset: word/load "unset" 
    ~new-line: word/load "new-line" 
    ~new-line?: word/load "new-line?" 
    ~context?: word/load "context?" 
    ~set-env: word/load "set-env" 
    ~get-env: word/load "get-env" 
    ~list-env: word/load "list-env" 
    ~now: word/load "now" 
    ~sign?: word/load "sign?" 
    ~as: word/load "as" 
    ~call: word/load "call" 
    ~size?: word/load "size?" 
    ~browse: word/load "browse" 
    ~decompress: word/load "decompress" 
    ~recycle: word/load "recycle" 
    ~quit-return: word/load "quit-return" 
    ~set-quiet: word/load "set-quiet" 
    ~shift-right: word/load "shift-right" 
    ~shift-left: word/load "shift-left" 
    ~shift-logical: word/load "shift-logical" 
    ~last-lf?: word/load "last-lf?" 
    ~get-current-dir: word/load "get-current-dir" 
    ~set-current-dir: word/load "set-current-dir" 
    ~create-dir: word/load "create-dir" 
    ~exists?: word/load "exists?" 
    ~os-info: word/load "os-info" 
    ~as-color: word/load "as-color" 
    ~as-ipv4: word/load "as-ipv4" 
    ~as-rgba: word/load "as-rgba" 
    ~read-clipboard: word/load "read-clipboard" 
    ~write-clipboard: word/load "write-clipboard" 
    ~write-stdout: word/load "write-stdout" 
    ~yes: word/load "yes" 
    ~on: word/load "on" 
    ~no: word/load "no" 
    ~off: word/load "off" 
    ~tab: word/load "tab" 
    ~cr: word/load "cr" 
    ~newline: word/load "newline" 
    ~lf: word/load "lf" 
    ~escape: word/load "escape" 
    ~slash: word/load "slash" 
    ~sp: word/load "sp" 
    ~space: word/load "space" 
    ~null: word/load "null" 
    ~crlf: word/load "crlf" 
    ~dot: word/load "dot" 
    ~comma: word/load "comma" 
    ~dbl-quote: word/load "dbl-quote" 
    ~pi: word/load "pi" 
    ~Rebol: word/load "Rebol" 
    ~internal!: word/load "internal!" 
    ~external!: word/load "external!" 
    ~number!: word/load "number!" 
    ~scalar!: word/load "scalar!" 
    ~any-word!: word/load "any-word!" 
    ~all-word!: word/load "all-word!" 
    ~any-list!: word/load "any-list!" 
    ~any-path!: word/load "any-path!" 
    ~any-block!: word/load "any-block!" 
    ~any-function!: word/load "any-function!" 
    ~any-object!: word/load "any-object!" 
    ~any-string!: word/load "any-string!" 
    ~series!: word/load "series!" 
    ~immediate!: word/load "immediate!" 
    ~default!: word/load "default!" 
    ~any-type!: word/load "any-type!" 
    ~aqua: word/load "aqua" 
    ~beige: word/load "beige" 
    ~black: word/load "black" 
    ~blue: word/load "blue" 
    ~brick: word/load "brick" 
    ~brown: word/load "brown" 
    ~coal: word/load "coal" 
    ~coffee: word/load "coffee" 
    ~crimson: word/load "crimson" 
    ~cyan: word/load "cyan" 
    ~forest: word/load "forest" 
    ~gold: word/load "gold" 
    ~gray: word/load "gray" 
    ~green: word/load "green" 
    ~ivory: word/load "ivory" 
    ~khaki: word/load "khaki" 
    ~leaf: word/load "leaf" 
    ~linen: word/load "linen" 
    ~magenta: word/load "magenta" 
    ~maroon: word/load "maroon" 
    ~mint: word/load "mint" 
    ~navy: word/load "navy" 
    ~oldrab: word/load "oldrab" 
    ~olive: word/load "olive" 
    ~orange: word/load "orange" 
    ~papaya: word/load "papaya" 
    ~pewter: word/load "pewter" 
    ~pink: word/load "pink" 
    ~purple: word/load "purple" 
    ~reblue: word/load "reblue" 
    ~rebolor: word/load "rebolor" 
    ~red: word/load "red" 
    ~sienna: word/load "sienna" 
    ~silver: word/load "silver" 
    ~sky: word/load "sky" 
    ~snow: word/load "snow" 
    ~tanned: word/load "tanned" 
    ~teal: word/load "teal" 
    ~violet: word/load "violet" 
    ~water: word/load "water" 
    ~wheat: word/load "wheat" 
    ~white: word/load "white" 
    ~yello: word/load "yello" 
    ~yellow: word/load "yellow" 
    ~glass: word/load "glass" 
    ~transparent: word/load "transparent" 
    ~routine: word/load "routine" 
    ~alert: word/load "alert" 
    ~also: word/load "also" 
    ~attempt: word/load "attempt" 
    ~comment: word/load "comment" 
    ~quit: word/load "quit" 
    ~empty?: word/load "empty?" 
    ~??: word/load "??" 
    ~probe: word/load "probe" 
    ~quote: word/load "quote" 
    ~first: word/load "first" 
    ~second: word/load "second" 
    ~third: word/load "third" 
    ~fourth: word/load "fourth" 
    ~fifth: word/load "fifth" 
    ~last: word/load "last" 
    ~spec-of: word/load "spec-of" 
    ~body-of: word/load "body-of" 
    ~words-of: word/load "words-of" 
    ~class-of: word/load "class-of" 
    ~values-of: word/load "values-of" 
    ~bitset?: word/load "bitset?" 
    ~binary?: word/load "binary?" 
    ~block?: word/load "block?" 
    ~char?: word/load "char?" 
    ~email?: word/load "email?" 
    ~file?: word/load "file?" 
    ~float?: word/load "float?" 
    ~get-path?: word/load "get-path?" 
    ~get-word?: word/load "get-word?" 
    ~hash?: word/load "hash?" 
    ~integer?: word/load "integer?" 
    ~issue?: word/load "issue?" 
    ~lit-path?: word/load "lit-path?" 
    ~lit-word?: word/load "lit-word?" 
    ~logic?: word/load "logic?" 
    ~map?: word/load "map?" 
    ~none?: word/load "none?" 
    ~pair?: word/load "pair?" 
    ~paren?: word/load "paren?" 
    ~path?: word/load "path?" 
    ~percent?: word/load "percent?" 
    ~refinement?: word/load "refinement?" 
    ~set-path?: word/load "set-path?" 
    ~set-word?: word/load "set-word?" 
    ~string?: word/load "string?" 
    ~tag?: word/load "tag?" 
    ~time?: word/load "time?" 
    ~typeset?: word/load "typeset?" 
    ~tuple?: word/load "tuple?" 
    ~unset?: word/load "unset?" 
    ~url?: word/load "url?" 
    ~word?: word/load "word?" 
    ~image?: word/load "image?" 
    ~date?: word/load "date?" 
    ~handle?: word/load "handle?" 
    ~error?: word/load "error?" 
    ~action?: word/load "action?" 
    ~native?: word/load "native?" 
    ~datatype?: word/load "datatype?" 
    ~function?: word/load "function?" 
    ~object?: word/load "object?" 
    ~op?: word/load "op?" 
    ~routine?: word/load "routine?" 
    ~vector?: word/load "vector?" 
    ~any-list?: word/load "any-list?" 
    ~any-block?: word/load "any-block?" 
    ~any-function?: word/load "any-function?" 
    ~any-object?: word/load "any-object?" 
    ~any-path?: word/load "any-path?" 
    ~any-string?: word/load "any-string?" 
    ~any-word?: word/load "any-word?" 
    ~series?: word/load "series?" 
    ~number?: word/load "number?" 
    ~immediate?: word/load "immediate?" 
    ~scalar?: word/load "scalar?" 
    ~all-word?: word/load "all-word?" 
    ~to-bitset: word/load "to-bitset" 
    ~to-binary: word/load "to-binary" 
    ~to-block: word/load "to-block" 
    ~to-char: word/load "to-char" 
    ~to-email: word/load "to-email" 
    ~to-file: word/load "to-file" 
    ~to-float: word/load "to-float" 
    ~to-get-path: word/load "to-get-path" 
    ~to-get-word: word/load "to-get-word" 
    ~to-hash: word/load "to-hash" 
    ~to-integer: word/load "to-integer" 
    ~to-issue: word/load "to-issue" 
    ~to-lit-path: word/load "to-lit-path" 
    ~to-lit-word: word/load "to-lit-word" 
    ~to-logic: word/load "to-logic" 
    ~to-map: word/load "to-map" 
    ~to-none: word/load "to-none" 
    ~to-pair: word/load "to-pair" 
    ~to-paren: word/load "to-paren" 
    ~to-path: word/load "to-path" 
    ~to-percent: word/load "to-percent" 
    ~to-refinement: word/load "to-refinement" 
    ~to-set-path: word/load "to-set-path" 
    ~to-set-word: word/load "to-set-word" 
    ~to-string: word/load "to-string" 
    ~to-tag: word/load "to-tag" 
    ~to-time: word/load "to-time" 
    ~to-typeset: word/load "to-typeset" 
    ~to-tuple: word/load "to-tuple" 
    ~to-unset: word/load "to-unset" 
    ~to-url: word/load "to-url" 
    ~to-word: word/load "to-word" 
    ~to-image: word/load "to-image" 
    ~to-date: word/load "to-date" 
    ~context: word/load "context" 
    ~alter: word/load "alter" 
    ~offset?: word/load "offset?" 
    ~repend: word/load "repend" 
    ~replace: word/load "replace" 
    ~math: word/load "math" 
    ~charset: word/load "charset" 
    ~p-indent: word/load "p-indent" 
    ~on-parse-event: word/load "on-parse-event" 
    ~parse-trace: word/load "parse-trace" 
    ~suffix?: word/load "suffix?" 
    ~load: word/load "load" 
    ~save: word/load "save" 
    ~cause-error: word/load "cause-error" 
    ~pad: word/load "pad" 
    ~mod: word/load "mod" 
    ~modulo: word/load "modulo" 
    ~eval-set-path: word/load "eval-set-path" 
    ~to-red-file: word/load "to-red-file" 
    ~dir?: word/load "dir?" 
    ~normalize-dir: word/load "normalize-dir" 
    ~what-dir: word/load "what-dir" 
    ~change-dir: word/load "change-dir" 
    ~make-dir: word/load "make-dir" 
    ~extract: word/load "extract" 
    ~extract-boot-args: word/load "extract-boot-args" 
    ~collect: word/load "collect" 
    ~flip-exe-flag: word/load "flip-exe-flag" 
    ~split: word/load "split" 
    ~dirize: word/load "dirize" 
    ~clean-path: word/load "clean-path" 
    ~split-path: word/load "split-path" 
    ~do-file: word/load "do-file" 
    ~path-thru: word/load "path-thru" 
    ~exists-thru?: word/load "exists-thru?" 
    ~read-thru: word/load "read-thru" 
    ~load-thru: word/load "load-thru" 
    ~do-thru: word/load "do-thru" 
    ~cos: word/load "cos" 
    ~sin: word/load "sin" 
    ~tan: word/load "tan" 
    ~acos: word/load "acos" 
    ~asin: word/load "asin" 
    ~atan: word/load "atan" 
    ~atan2: word/load "atan2" 
    ~sqrt: word/load "sqrt" 
    ~to-UTC-date: word/load "to-UTC-date" 
    ~to-local-date: word/load "to-local-date" 
    ~rejoin: word/load "rejoin" 
    ~sum: word/load "sum" 
    ~average: word/load "average" 
    ~single?: word/load "single?" 
    ~last?: word/load "last?" 
    ~keys-of: word/load "keys-of" 
    ~object: word/load "object" 
    ~halt: word/load "halt" 
    ~system: word/load "system" 
    ~body: word/load "body" 
    ~version: word/load "version" 
    ~build: word/load "build" 
    ~date: word/load "date" 
    ~git: word/load "git" 
    ~config: word/load "config" 
    ~words: word/load "words" 
    ~platform: word/load "platform" 
    ~catalog: word/load "catalog" 
    ~datatypes: word/load "datatypes" 
    ~actions: word/load "actions" 
    ~natives: word/load "natives" 
    ~accessors: word/load "accessors" 
    ~errors: word/load "errors" 
    ~code: word/load "code" 
    ~type: word/load "type" 
    ~while-cond: word/load "while-cond" 
    ~note: word/load "note" 
    ~no-load: word/load "no-load" 
    ~syntax: word/load "syntax" 
    ~invalid: word/load "invalid" 
    ~missing: word/load "missing" 
    ~no-header: word/load "no-header" 
    ~no-rs-header: word/load "no-rs-header" 
    ~bad-header: word/load "bad-header" 
    ~malconstruct: word/load "malconstruct" 
    ~bad-char: word/load "bad-char" 
    ~script: word/load "script" 
    ~no-value: word/load "no-value" 
    ~need-value: word/load "need-value" 
    ~not-defined: word/load "not-defined" 
    ~not-in-context: word/load "not-in-context" 
    ~no-arg: word/load "no-arg" 
    ~expect-arg: word/load "expect-arg" 
    ~expect-val: word/load "expect-val" 
    ~expect-type: word/load "expect-type" 
    ~cannot-use: word/load "cannot-use" 
    ~invalid-arg: word/load "invalid-arg" 
    ~invalid-type: word/load "invalid-type" 
    ~invalid-type-spec: word/load "invalid-type-spec" 
    ~invalid-op: word/load "invalid-op" 
    ~no-op-arg: word/load "no-op-arg" 
    ~bad-op-spec: word/load "bad-op-spec" 
    ~invalid-data: word/load "invalid-data" 
    ~invalid-part: word/load "invalid-part" 
    ~not-same-type: word/load "not-same-type" 
    ~not-same-class: word/load "not-same-class" 
    ~not-related: word/load "not-related" 
    ~bad-func-def: word/load "bad-func-def" 
    ~bad-func-arg: word/load "bad-func-arg" 
    ~bad-func-extern: word/load "bad-func-extern" 
    ~no-refine: word/load "no-refine" 
    ~bad-refines: word/load "bad-refines" 
    ~bad-refine: word/load "bad-refine" 
    ~word-first: word/load "word-first" 
    ~empty-path: word/load "empty-path" 
    ~invalid-path: word/load "invalid-path" 
    ~invalid-path-set: word/load "invalid-path-set" 
    ~invalid-path-get: word/load "invalid-path-get" 
    ~bad-path-type: word/load "bad-path-type" 
    ~bad-path-set: word/load "bad-path-set" 
    ~bad-field-set: word/load "bad-field-set" 
    ~dup-vars: word/load "dup-vars" 
    ~past-end: word/load "past-end" 
    ~missing-arg: word/load "missing-arg" 
    ~out-of-range: word/load "out-of-range" 
    ~invalid-chars: word/load "invalid-chars" 
    ~invalid-compare: word/load "invalid-compare" 
    ~wrong-type: word/load "wrong-type" 
    ~invalid-refine-arg: word/load "invalid-refine-arg" 
    ~type-limit: word/load "type-limit" 
    ~size-limit: word/load "size-limit" 
    ~no-return: word/load "no-return" 
    ~throw-usage: word/load "throw-usage" 
    ~locked-word: word/load "locked-word" 
    ~bad-bad: word/load "bad-bad" 
    ~bad-make-arg: word/load "bad-make-arg" 
    ~bad-to-arg: word/load "bad-to-arg" 
    ~invalid-months: word/load "invalid-months" 
    ~invalid-spec-field: word/load "invalid-spec-field" 
    ~missing-spec-field: word/load "missing-spec-field" 
    ~move-bad: word/load "move-bad" 
    ~too-long: word/load "too-long" 
    ~invalid-char: word/load "invalid-char" 
    ~bad-loop-series: word/load "bad-loop-series" 
    ~parse-rule: word/load "parse-rule" 
    ~parse-end: word/load "parse-end" 
    ~parse-invalid-ref: word/load "parse-invalid-ref" 
    ~parse-block: word/load "parse-block" 
    ~parse-unsupported: word/load "parse-unsupported" 
    ~parse-infinite: word/load "parse-infinite" 
    ~parse-stack: word/load "parse-stack" 
    ~parse-keep: word/load "parse-keep" 
    ~parse-into-bad: word/load "parse-into-bad" 
    ~invalid-draw: word/load "invalid-draw" 
    ~invalid-data-facet: word/load "invalid-data-facet" 
    ~face-type: word/load "face-type" 
    ~not-window: word/load "not-window" 
    ~bad-window: word/load "bad-window" 
    ~not-linked: word/load "not-linked" 
    ~not-event-type: word/load "not-event-type" 
    ~invalid-facet-type: word/load "invalid-facet-type" 
    ~vid-invalid-syntax: word/load "vid-invalid-syntax" 
    ~rtd-invalid-syntax: word/load "rtd-invalid-syntax" 
    ~rtd-no-match: word/load "rtd-no-match" 
    ~react-bad-func: word/load "react-bad-func" 
    ~react-not-enough: word/load "react-not-enough" 
    ~react-no-match: word/load "react-no-match" 
    ~react-bad-obj: word/load "react-bad-obj" 
    ~react-gctx: word/load "react-gctx" 
    ~lib-invalid-arg: word/load "lib-invalid-arg" 
    ~zero-divide: word/load "zero-divide" 
    ~overflow: word/load "overflow" 
    ~positive: word/load "positive" 
    ~access: word/load "access" 
    ~cannot-open: word/load "cannot-open" 
    ~invalid-utf8: word/load "invalid-utf8" 
    ~no-connect: word/load "no-connect" 
    ~reserved1: word/load "reserved1" 
    ~reserved2: word/load "reserved2" 
    ~user: word/load "user" 
    ~message: word/load "message" 
    ~internal: word/load "internal" 
    ~bad-path: word/load "bad-path" 
    ~not-here: word/load "not-here" 
    ~no-memory: word/load "no-memory" 
    ~wrong-mem: word/load "wrong-mem" 
    ~stack-overflow: word/load "stack-overflow" 
    ~too-deep: word/load "too-deep" 
    ~no-cycle: word/load "no-cycle" 
    ~feature-na: word/load "feature-na" 
    ~not-done: word/load "not-done" 
    ~invalid-error: word/load "invalid-error" 
    ~routines: word/load "routines" 
    ~red-system: word/load "red-system" 
    ~state: word/load "state" 
    ~interpreted?: word/load "interpreted?" 
    ~last-error: word/load "last-error" 
    ~trace: word/load "trace" 
    ~modules: word/load "modules" 
    ~codecs: word/load "codecs" 
    ~schemes: word/load "schemes" 
    ~ports: word/load "ports" 
    ~locale: word/load "locale" 
    ~language: word/load "language" 
    ~language*: word/load "language*" 
    ~locale*: word/load "locale*" 
    ~months: word/load "months" 
    ~days: word/load "days" 
    ~options: word/load "options" 
    ~boot: word/load "boot" 
    ~home: word/load "home" 
    ~path: word/load "path" 
    ~cache: word/load "cache" 
    ~thru-cache: word/load "thru-cache" 
    ~args: word/load "args" 
    ~do-arg: word/load "do-arg" 
    ~debug: word/load "debug" 
    ~secure: word/load "secure" 
    ~quiet: word/load "quiet" 
    ~binary-base: word/load "binary-base" 
    ~decimal-digits: word/load "decimal-digits" 
    ~module-paths: word/load "module-paths" 
    ~file-types: word/load "file-types" 
    ~float: word/load "float" 
    ~pretty?: word/load "pretty?" 
    ~full?: word/load "full?" 
    ~on-change*: word/load "on-change*" 
    ~on-deep-change*: word/load "on-deep-change*" 
    ~title: word/load "title" 
    ~header: word/load "header" 
    ~parent: word/load "parent" 
    ~standard: word/load "standard" 
    ~name: word/load "name" 
    ~file: word/load "file" 
    ~author: word/load "author" 
    ~needs: word/load "needs" 
    ~error: word/load "error" 
    ~id: word/load "id" 
    ~arg1: word/load "arg1" 
    ~arg2: word/load "arg2" 
    ~arg3: word/load "arg3" 
    ~near: word/load "near" 
    ~where: word/load "where" 
    ~stack: word/load "stack" 
    ~file-info: word/load "file-info" 
    ~size: word/load "size" 
    ~lexer: word/load "lexer" 
    ~console: word/load "console" 
    ~view: word/load "view" 
    ~reactivity: word/load "reactivity" 
    ~pre-load: word/load "pre-load" 
    ~throw-error: word/load "throw-error" 
    ~make-hm: word/load "make-hm" 
    ~make-msf: word/load "make-msf" 
    ~make-hms: word/load "make-hms" 
    ~make-hmsf: word/load "make-hmsf" 
    ~make-time: word/load "make-time" 
    ~make-binary: word/load "make-binary" 
    ~make-tuple: word/load "make-tuple" 
    ~make-number: word/load "make-number" 
    ~make-float: word/load "make-float" 
    ~make-hexa: word/load "make-hexa" 
    ~make-char: word/load "make-char" 
    ~push-path: word/load "push-path" 
    ~set-path: word/load "set-path" 
    ~make-word: word/load "make-word" 
    ~pop: word/load "pop" 
    ~store: word/load "store" 
    ~transcode: word/load "transcode" 
    ~+: word/load "+" 
    ~-: word/load "-" 
    ~*: word/load "*" 
    ~/: word/load "/" 
    ~//: word/load "//" 
    ~%: word/load "%" 
    ~=: word/load "=" 
    ~<>: word/load "<>" 
    ~==: word/load "==" 
    ~=?: word/load "=?" 
    ~<: word/load "<" 
    ~>: word/load ">" 
    ~<=: word/load "<=" 
    ~>=: word/load ">=" 
    ~<<: word/load "<<" 
    ~>>: word/load ">>" 
    ~>>>: word/load ">>>" 
    ~**: word/load "**" 
    ~and: word/load "and" 
    ~or: word/load "or" 
    ~xor: word/load "xor" 
    ~eval-path: word/load "eval-path" 
    ~png: word/load "png" 
    ~PNG1: word/load "PNG" 
    ~mime-type: word/load "mime-type" 
    ~suffixes: word/load "suffixes" 
    ~encode: word/load "encode" 
    ~decode: word/load "decode" 
    ~jpeg: word/load "jpeg" 
    ~JPEG2: word/load "JPEG" 
    ~bmp: word/load "bmp" 
    ~BMP3: word/load "BMP" 
    ~gif: word/load "gif" 
    ~GIF4: word/load "GIF" 
    ~reactor!: word/load "reactor!" 
    ~deep-reactor!: word/load "deep-reactor!" 
    ~relations: word/load "relations" 
    ~queue: word/load "queue" 
    ~eat-events?: word/load "eat-events?" 
    ~debug?: word/load "debug?" 
    ~source: word/load "source" 
    ~add-relation: word/load "add-relation" 
    ~eval: word/load "eval" 
    ~eval-reaction: word/load "eval-reaction" 
    ~pending?: word/load "pending?" 
    ~check: word/load "check" 
    ~stop-reactor: word/load "stop-reactor" 
    ~clear-reactions: word/load "clear-reactions" 
    ~dump-reactions: word/load "dump-reactions" 
    ~is: word/load "is" 
    ~react?: word/load "react?" 
    ~react: word/load "react" 
    ~preprocessor: word/load "preprocessor" 
    ~exec: word/load "exec" 
    ~protos: word/load "protos" 
    ~macros: word/load "macros" 
    ~syms: word/load "syms" 
    ~depth: word/load "depth" 
    ~active?: word/load "active?" 
    ~trace?: word/load "trace?" 
    ~s: word/load "s" 
    ~do-quit: word/load "do-quit" 
    ~syntax-error: word/load "syntax-error" 
    ~do-safe: word/load "do-safe" 
    ~do-code: word/load "do-code" 
    ~count-args: word/load "count-args" 
    ~func-arity?: word/load "func-arity?" 
    ~fetch-next: word/load "fetch-next" 
    ~do-macro: word/load "do-macro" 
    ~register-macro: word/load "register-macro" 
    ~reset: word/load "reset" 
    ~expand: word/load "expand" 
    ~expand-directives: word/load "expand-directives" 
    ~image?||320: word/load "image?||320" 
    ~Windows: word/load "Windows" 
    ~flags: word/load "flags" 
    ~modal: word/load "modal" 
    ~value1: word/load "value1" 
    ~value: word/load "value" 
    ~spec: word/load "spec" 
    ~class: word/load "class" 
    ~values: word/load "values" 
    ~select-key*: word/load "select-key*" 
    ~codec: word/load "codec" 
    ~mime: word/load "mime" 
    ~Content-Type: word/load "Content-Type" 
    ~part: word/load "part" 
    ~one: word/load "one" 
    ~else: word/load "else" 
    ~out: word/load "out" 
    ~length: word/load "length" 
    ~k: word/load "k" 
    ~v: word/load "v" 
    ~dir: word/load "dir" 
    ~series: word/load "series" 
    ~pos: word/load "pos" 
    ~keep: word/load "keep" 
    ~flag: word/load "flag" 
    ~so: word/load "so" 
    ~MD5: word/load "MD5" 
    ~timezone: word/load "timezone" 
    ~src: word/load "src" 
    ~cs: word/load "cs" 
    ~digit: word/load "digit" 
    ~hexa-upper: word/load "hexa-upper" 
    ~hexa-lower: word/load "hexa-lower" 
    ~hexa: word/load "hexa" 
    ~hexa-char: word/load "hexa-char" 
    ~not-word-char: word/load "not-word-char" 
    ~not-word-1st: word/load "not-word-1st" 
    ~not-file-char: word/load "not-file-char" 
    ~not-str-char: word/load "not-str-char" 
    ~not-mstr-char: word/load "not-mstr-char" 
    ~caret-char: word/load "caret-char" 
    ~non-printable-char: word/load "non-printable-char" 
    ~integer-end: word/load "integer-end" 
    ~ws-ASCII: word/load "ws-ASCII" 
    ~ws-U+2k: word/load "ws-U+2k" 
    ~control-char: word/load "control-char" 
    ~four: word/load "four" 
    ~half: word/load "half" 
    ~non-zero: word/load "non-zero" 
    ~path-end: word/load "path-end" 
    ~base64-char: word/load "base64-char" 
    ~slash-end: word/load "slash-end" 
    ~not-url-char: word/load "not-url-char" 
    ~email-end: word/load "email-end" 
    ~pair-end: word/load "pair-end" 
    ~file-end: word/load "file-end" 
    ~date-sep: word/load "date-sep" 
    ~time-sep: word/load "time-sep" 
    ~not-tag-1st: word/load "not-tag-1st" 
    ~err: word/load "err" 
    ~srs: word/load "srs" 
    ~owned: word/load "owned" 
    ~only: word/load "only" 
    ~result: word/load "result" 
    ~q: word/load "q" 
    ~list: word/load "list" 
    ~face: word/load "face" 
    ~pane: word/load "pane" 
    ~f: word/load "f" 
    ~x: word/load "x" 
    ~obj: word/load "obj" 
    ~field: word/load "field" 
    ~reaction: word/load "reaction" 
    ~target: word/load "target" 
    ~halt-request: word/load "halt-request" 
    ~res: word/load "res" 
    ~macro: word/load "macro" 
    ~word: word/load "word" 
    ~p: word/load "p" 
    ~|: word/load "|" 
    ~and~: word/load "and~" 
    ~or~: word/load "or~" 
    ~xor~: word/load "xor~" 
    ~ctx210~platform: word/load "ctx210~platform" 
    ~ctx239~interpreted?: word/load "ctx239~interpreted?" 
    ~ctx250~on-change*: word/load "ctx250~on-change*" 
    ~ctx248~on-change*: word/load "ctx248~on-change*" 
    ~ctx248~on-deep-change*: word/load "ctx248~on-deep-change*" 
    ~ctx265~throw-error: word/load "ctx265~throw-error" 
    ~ctx265~make-hm: word/load "ctx265~make-hm" 
    ~ctx265~make-msf: word/load "ctx265~make-msf" 
    ~ctx265~make-hms: word/load "ctx265~make-hms" 
    ~ctx265~make-hmsf: word/load "ctx265~make-hmsf" 
    ~ctx265~make-time: word/load "ctx265~make-time" 
    ~ctx265~make-binary: word/load "ctx265~make-binary" 
    ~ctx265~make-tuple: word/load "ctx265~make-tuple" 
    ~ctx265~make-number: word/load "ctx265~make-number" 
    ~ctx265~make-float: word/load "ctx265~make-float" 
    ~ctx265~make-hexa: word/load "ctx265~make-hexa" 
    ~ctx265~make-char: word/load "ctx265~make-char" 
    ~ctx265~push-path: word/load "ctx265~push-path" 
    ~ctx265~set-path: word/load "ctx265~set-path" 
    ~ctx265~make-word: word/load "ctx265~make-word" 
    ~ctx265~to-word: word/load "ctx265~to-word" 
    ~ctx265~pop: word/load "ctx265~pop" 
    ~ctx265~store: word/load "ctx265~store" 
    ~ctx265~new-line: word/load "ctx265~new-line" 
    ~ctx265~transcode: word/load "ctx265~transcode" 
    ~ctx273~encode: word/load "ctx273~encode" 
    ~ctx273~decode: word/load "ctx273~decode" 
    ~ctx276~encode: word/load "ctx276~encode" 
    ~ctx276~decode: word/load "ctx276~decode" 
    ~ctx279~encode: word/load "ctx279~encode" 
    ~ctx279~decode: word/load "ctx279~decode" 
    ~ctx282~encode: word/load "ctx282~encode" 
    ~ctx282~decode: word/load "ctx282~decode" 
    ~ctx285~on-change*: word/load "ctx285~on-change*" 
    ~ctx288~on-change*: word/load "ctx288~on-change*" 
    ~ctx288~on-deep-change*: word/load "ctx288~on-deep-change*" 
    ~ctx291~add-relation: word/load "ctx291~add-relation" 
    ~ctx291~eval: word/load "ctx291~eval" 
    ~ctx291~eval-reaction: word/load "ctx291~eval-reaction" 
    ~ctx291~pending?: word/load "ctx291~pending?" 
    ~ctx291~check: word/load "ctx291~check" 
    ~ctx291~is~: word/load "ctx291~is~" 
    ~ctx304~do-quit: word/load "ctx304~do-quit" 
    ~ctx304~throw-error: word/load "ctx304~throw-error" 
    ~ctx304~syntax-error: word/load "ctx304~syntax-error" 
    ~ctx304~do-safe: word/load "ctx304~do-safe" 
    ~ctx304~do-code: word/load "ctx304~do-code" 
    ~ctx304~count-args: word/load "ctx304~count-args" 
    ~ctx304~func-arity?: word/load "ctx304~func-arity?" 
    ~ctx304~fetch-next: word/load "ctx304~fetch-next" 
    ~ctx304~eval: word/load "ctx304~eval" 
    ~ctx304~do-macro: word/load "ctx304~do-macro" 
    ~ctx304~register-macro: word/load "ctx304~register-macro" 
    ~ctx304~reset: word/load "ctx304~reset" 
    ~ctx304~expand: word/load "ctx304~expand" 
    ~a: word/load "a" 
    ~b: word/load "b" 
    ~ctx361~b: word/load "b"
]
contexts: make hash! [ctx48 [spec body] ctx49 [msg] ctx50 [
        value1 
        value2
    ] ctx51 [
        value 
        safer
    ] ctx52 [value] ctx53 [
        return status
    ] ctx54 [
        series
    ] ctx55 [
        value
    ] ctx56 [
        value
    ] ctx57 [
        value
    ] ctx58 [s] ctx59 [s] ctx60 [s] ctx61 [s] ctx62 [s] ctx63 [s] ctx64 [value] ctx65 [value] ctx66 [value] ctx67 [value] ctx68 [value] ctx69 [value] ctx70 [value] ctx71 [value] ctx72 [value] ctx73 [value] ctx74 [value] ctx75 [value] ctx76 [value] ctx77 [value] ctx78 [value] ctx79 [value] ctx80 [value] ctx81 [value] ctx82 [value] ctx83 [value] ctx84 [value] ctx85 [value] ctx86 [value] ctx87 [value] ctx88 [value] ctx89 [value] ctx90 [value] ctx91 [value] ctx92 [value] ctx93 [value] ctx94 [value] ctx95 [value] ctx96 [value] ctx97 [value] ctx98 [value] ctx99 [value] ctx100 [value] ctx101 [value] ctx102 [value] ctx103 [value] ctx104 [value] ctx105 [value] ctx106 [value] ctx107 [value] ctx108 [value] ctx109 [value] ctx110 [value] ctx111 [value] ctx112 [value] ctx113 [value] ctx114 [value] ctx115 [value] ctx116 [value] ctx117 [value] ctx118 [value] ctx119 [value] ctx120 [value] ctx121 [value] ctx122 [value] ctx123 [value] ctx124 [value] ctx125 [value] ctx126 [value] ctx127 [value] ctx128 [value] ctx129 [value] ctx130 [value] ctx131 [value] ctx132 [value] ctx133 [value] ctx134 [value] ctx135 [value] ctx136 [value] ctx137 [value] ctx138 [value] ctx139 [value] ctx140 [value] ctx141 [value] ctx142 [value] ctx143 [value] ctx144 [value] ctx145 [value] ctx146 [value] ctx147 [value] ctx148 [value] ctx149 [value] ctx150 [value] ctx151 [value] ctx152 [value] ctx153 [value] ctx154 [value] ctx155 [value] ctx156 [value] ctx157 [value] ctx158 [value] ctx159 [
        spec
    ] ctx160 [
        series 
        value
    ] ctx161 [
        series1 
        series2
    ] ctx162 [
        series 
        value 
        only
    ] ctx163 [
        series 
        pattern 
        value 
        all 
        deep 
        case local p rule s e many? len pos do-parse do-find
    ] ctx164 [
        body 
        safe local rule pos op sub end
    ] ctx165 [
        spec
    ] ctx166 [
        event 
        match? 
        rule 
        input 
        stack
    ] ctx167 [
        input 
        rules 
        case 
        part 
        limit
    ] ctx168 [
        path
    ] ctx169 [
        source 
        header 
        all 
        trap 
        next 
        position 
        part 
        length 
        into 
        out 
        as 
        type local codec suffix name mime result
    ] ctx170 [
        where 
        value 
        header 
        header-data 
        all 
        length 
        as 
        format local dst codec data suffix find-encoder? name pos header-str k v
    ] ctx171 [
        err-type 
        err-id 
        args local type id arg1 arg2 arg3
    ] ctx172 [
        str 
        n 
        left 
        with 
        c
    ] ctx173 [
        a 
        b local r
    ] ctx174 [
        a 
        b local r
    ] ctx175 [value1] ctx176 [
        path local colon? slash? len i c dst
    ] ctx177 [file] ctx178 [
        dir
    ] ctx179 [local path] ctx180 [
        dir
    ] ctx181 [
        path 
        deep local dirs end created dir
    ] ctx182 [
        series 
        width 
        index 
        pos 
        into 
        output
    ] ctx183 [local args pos unescape len e s] ctx184 [
        body 
        into 
        collected local keep rule pos
    ] ctx185 [
        path local file buffer flag
    ] ctx186 [
        series dlm local s 
        num
    ] ctx187 [
        path
    ] ctx188 [
        file 
        only 
        dir local out cnt f not-file?
    ] ctx189 [
        target local dir pos
    ] ctx190 [file local saved code new-path src] ctx191 [
        url local so hash file path
    ] ctx192 [
        url
    ] ctx193 [
        url 
        update 
        binary local path data
    ] ctx194 [
        url 
        update 
        as 
        type local path file
    ] ctx195 [
        url 
        update
    ] ctx196 [
        angle
    ] ctx197 [
        angle
    ] ctx198 [
        angle
    ] ctx199 [
        cosine
    ] ctx200 [
        sine
    ] ctx201 [
        tangent
    ] ctx202 [
        y 
        x
    ] ctx203 [
        number
    ] ctx204 [
        date
    ] ctx205 [
        date
    ] ctx206 [
        block
    ] ctx207 [
        values local result value
    ] ctx208 [
        block
    ] ctx209 [
        series
    ] ctx210 [
        version 
        build 
        words 
        platform 
        catalog 
        state 
        modules 
        codecs 
        schemes 
        ports 
        locale 
        options 
        script 
        standard 
        lexer 
        console 
        view 
        reactivity
    ] ctx212 [
        date 
        git 
        config
    ] ctx214 [] ctx215 [
        datatypes 
        actions 
        natives 
        accessors 
        errors
    ] ctx217 [
        throw 
        note 
        syntax 
        script 
        math 
        access 
        reserved1 
        reserved2 
        user 
        internal
    ] ctx219 [
        code 
        type 
        break 
        return 
        throw 
        continue 
        while-cond
    ] ctx221 [
        code 
        type 
        no-load
    ] ctx223 [
        code 
        type 
        invalid 
        missing 
        no-header 
        no-rs-header 
        bad-header 
        malconstruct 
        bad-char
    ] ctx225 [
        code 
        type 
        no-value 
        need-value 
        not-defined 
        not-in-context 
        no-arg 
        expect-arg 
        expect-val 
        expect-type 
        cannot-use 
        invalid-arg 
        invalid-type 
        invalid-type-spec 
        invalid-op 
        no-op-arg 
        bad-op-spec 
        invalid-data 
        invalid-part 
        not-same-type 
        not-same-class 
        not-related 
        bad-func-def 
        bad-func-arg 
        bad-func-extern 
        no-refine 
        bad-refines 
        bad-refine 
        word-first 
        empty-path 
        invalid-path 
        invalid-path-set 
        invalid-path-get 
        bad-path-type 
        bad-path-set 
        bad-field-set 
        dup-vars 
        past-end 
        missing-arg 
        out-of-range 
        invalid-chars 
        invalid-compare 
        wrong-type 
        invalid-refine-arg 
        type-limit 
        size-limit 
        no-return 
        throw-usage 
        locked-word 
        bad-bad 
        bad-make-arg 
        bad-to-arg 
        invalid-months 
        invalid-spec-field 
        missing-spec-field 
        move-bad 
        too-long 
        invalid-char 
        bad-loop-series 
        parse-rule 
        parse-end 
        parse-invalid-ref 
        parse-block 
        parse-unsupported 
        parse-infinite 
        parse-stack 
        parse-keep 
        parse-into-bad 
        invalid-draw 
        invalid-data-facet 
        face-type 
        not-window 
        bad-window 
        not-linked 
        not-event-type 
        invalid-facet-type 
        vid-invalid-syntax 
        rtd-invalid-syntax 
        rtd-no-match 
        react-bad-func 
        react-not-enough 
        react-no-match 
        react-bad-obj 
        react-gctx 
        lib-invalid-arg
    ] ctx227 [
        code 
        type 
        zero-divide 
        overflow 
        positive
    ] ctx229 [
        code 
        type 
        cannot-open 
        invalid-utf8 
        no-connect
    ] ctx231 [
        code 
        type
    ] ctx233 [
        code 
        type
    ] ctx235 [
        code 
        type 
        message
    ] ctx237 [
        code 
        type 
        bad-path 
        not-here 
        no-memory 
        wrong-mem 
        stack-overflow 
        too-deep 
        no-cycle 
        feature-na 
        not-done 
        invalid-error 
        routines 
        red-system
    ] ctx239 [
        interpreted? 
        last-error 
        trace
    ] ctx241 [] ctx242 [] ctx244 [] ctx246 [
        language 
        language* 
        locale 
        locale* 
        months 
        days
    ] ctx248 [
        boot 
        home 
        path 
        script 
        cache 
        thru-cache 
        args 
        do-arg 
        debug 
        secure 
        quiet 
        binary-base 
        decimal-digits 
        module-paths 
        file-types 
        float 
        on-change* 
        on-deep-change*
    ] ctx250 [
        pretty? 
        full? 
        on-change*
    ] ctx252 [word old new] ctx253 [word old new] ctx254 [owner word target action new index part] ctx255 [
        title header parent path 
        args
    ] ctx257 [
        header 
        error 
        file-info
    ] ctx259 [
        title name type version date file author needs
    ] ctx261 [
        code type id arg1 arg2 arg3 near where stack
    ] ctx263 [
        name size date type
    ] ctx265 [
        pre-load 
        throw-error 
        make-hm 
        make-msf 
        make-hms 
        make-hmsf 
        make-time 
        make-binary 
        make-tuple 
        make-number 
        make-float 
        make-hexa 
        make-char 
        push-path 
        set-path 
        make-word 
        to-word 
        pop 
        store 
        new-line 
        transcode
    ] ctx267 [spec missing local type src pos] ctx268 [
        pos 
        hours 
        mins 
        secs 
        neg? local time
    ] ctx269 [
        stack 
        src 
        type
    ] ctx270 [stack local value pos] ctx271 [stack value local pos] ctx272 [
        src 
        dst 
        trap 
        one 
        only 
        part 
        length local 
        new s e c pos value cnt type process path 
        digit hexa-upper hexa-lower hexa hexa-char not-word-char not-word-1st 
        not-file-char not-str-char not-mstr-char caret-char 
        non-printable-char integer-end ws-ASCII ws-U+2k control-char 
        four half non-zero path-end base base64-char slash-end not-url-char 
        email-end pair-end file-end err date-sep time-sep not-tag-1st 
        cs stack count? old-line line make-string len make-file buffer month-rule m mon-rule list p byte ws newline-char counted-newline ws-no-count escaped-char char-rule line-string nested-curly-braces multiline-string string-rule tag-rule email-rule base-2-rule base-16-rule base-64-rule binary-rule file-rule url-rule symbol-rule ot begin-symbol-rule path-rule special-words word-rule get-word-rule lit-word-rule issue-rule refinement-rule sticky-word-rule hexa-rule tuple-value-rule tuple-rule time-rule value2 day-year-rule year day date-rule ee month date sep hour mn sec neg? zone positive-integer-rule integer-number-rule integer-rule float-special float-exp-rule float-number-rule float-rule map-rule block-rule paren-rule escaped-rule comment-rule wrong-end ending literal-value one-value any-value red-rules
    ] ctx273 [
        title 
        name 
        mime-type 
        suffixes 
        encode 
        decode
    ] ctx276 [
        title 
        name 
        mime-type 
        suffixes 
        encode 
        decode
    ] ctx279 [
        title 
        name 
        mime-type 
        suffixes 
        encode 
        decode
    ] ctx282 [
        title 
        name 
        mime-type 
        suffixes 
        encode 
        decode
    ] ctx285 [
        on-change*
    ] ctx287 [word old new local srs] ctx288 [on-change* 
        on-deep-change*
    ] ctx290 [owner word target action new index part] ctx291 [
        relations 
        queue 
        eat-events? 
        debug? 
        source 
        add-relation 
        eval 
        eval-reaction 
        pending? 
        check 
        is~
    ] ctx293 [
        obj 
        word 
        reaction 
        targets local new-rel
    ] ctx294 [code safe local result] ctx295 [reactor reaction target mark] ctx296 [reactor reaction local q] ctx297 [reactor only field local pos reaction q q'] ctx298 [
        face 
        deep local list pos f
    ] ctx299 [] ctx300 [local limit count obj field reaction target list] ctx301 [
        field 
        reaction local words obj rule item
    ] ctx302 [
        reactor 
        field 
        target local pos
    ] ctx303 [
        reaction 
        link 
        objects 
        unlink 
        src 
        later 
        with 
        ctx local objs found? rule item pos obj saved part path
    ] ctx304 [
        exec 
        protos 
        macros 
        stack 
        syms 
        depth 
        active? 
        trace? 
        s 
        do-quit 
        throw-error 
        syntax-error 
        do-safe 
        do-code 
        count-args 
        func-arity? 
        fetch-next 
        eval 
        do-macro 
        register-macro 
        reset 
        expand
    ] ctx306 [] ctx307 [error cmd code local w] ctx308 [s e] ctx309 [code manual with cmd local res t? src] ctx310 [code cmd local p] ctx311 [spec local total] ctx312 [spec with path local arity pos] ctx313 [code local base arity value path] ctx314 [code cmd local after expr] ctx315 [name pos arity local cmd saved p v res] ctx316 [spec local cnt rule p name macro pos valid? named?] ctx317 [job] ctx318 [
        code job 
        clean local rule e pos cond value then else cases body keep? expr src saved file
    ] ctx319 [
        code 
        clean local job
    ] ctx321 [value] ctx339 [v only] ctx361 [b] ctx363 [x y]]
in comp-expression
pc in check-infix-operators:
[]
none
*** Compilation Error: missing argument 
*** in file: /home/nathan/repos/myred/objFuncTest.red
*** near: [a/b]
